
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `FsmActionLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model FsmActionLog
 * 
 */
export type FsmActionLogModel = runtime.Types.Result.DefaultSelection<Prisma.$FsmActionLogPayload>

export type AggregateFsmActionLog = {
  _count: FsmActionLogCountAggregateOutputType | null
  _avg: FsmActionLogAvgAggregateOutputType | null
  _sum: FsmActionLogSumAggregateOutputType | null
  _min: FsmActionLogMinAggregateOutputType | null
  _max: FsmActionLogMaxAggregateOutputType | null
}

export type FsmActionLogAvgAggregateOutputType = {
  id: number | null
  entity_id: number | null
  user_id: number | null
}

export type FsmActionLogSumAggregateOutputType = {
  id: number | null
  entity_id: number | null
  user_id: number | null
}

export type FsmActionLogMinAggregateOutputType = {
  id: number | null
  entity_type: string | null
  entity_id: number | null
  action_name: string | null
  from_state: string | null
  to_state: string | null
  user_id: number | null
  created_at: Date | null
}

export type FsmActionLogMaxAggregateOutputType = {
  id: number | null
  entity_type: string | null
  entity_id: number | null
  action_name: string | null
  from_state: string | null
  to_state: string | null
  user_id: number | null
  created_at: Date | null
}

export type FsmActionLogCountAggregateOutputType = {
  id: number
  entity_type: number
  entity_id: number
  action_name: number
  from_state: number
  to_state: number
  user_id: number
  created_at: number
  _all: number
}


export type FsmActionLogAvgAggregateInputType = {
  id?: true
  entity_id?: true
  user_id?: true
}

export type FsmActionLogSumAggregateInputType = {
  id?: true
  entity_id?: true
  user_id?: true
}

export type FsmActionLogMinAggregateInputType = {
  id?: true
  entity_type?: true
  entity_id?: true
  action_name?: true
  from_state?: true
  to_state?: true
  user_id?: true
  created_at?: true
}

export type FsmActionLogMaxAggregateInputType = {
  id?: true
  entity_type?: true
  entity_id?: true
  action_name?: true
  from_state?: true
  to_state?: true
  user_id?: true
  created_at?: true
}

export type FsmActionLogCountAggregateInputType = {
  id?: true
  entity_type?: true
  entity_id?: true
  action_name?: true
  from_state?: true
  to_state?: true
  user_id?: true
  created_at?: true
  _all?: true
}

export type FsmActionLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FsmActionLog to aggregate.
   */
  where?: Prisma.FsmActionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmActionLogs to fetch.
   */
  orderBy?: Prisma.FsmActionLogOrderByWithRelationInput | Prisma.FsmActionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FsmActionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmActionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmActionLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FsmActionLogs
  **/
  _count?: true | FsmActionLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FsmActionLogAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FsmActionLogSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FsmActionLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FsmActionLogMaxAggregateInputType
}

export type GetFsmActionLogAggregateType<T extends FsmActionLogAggregateArgs> = {
      [P in keyof T & keyof AggregateFsmActionLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFsmActionLog[P]>
    : Prisma.GetScalarType<T[P], AggregateFsmActionLog[P]>
}




export type FsmActionLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FsmActionLogWhereInput
  orderBy?: Prisma.FsmActionLogOrderByWithAggregationInput | Prisma.FsmActionLogOrderByWithAggregationInput[]
  by: Prisma.FsmActionLogScalarFieldEnum[] | Prisma.FsmActionLogScalarFieldEnum
  having?: Prisma.FsmActionLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FsmActionLogCountAggregateInputType | true
  _avg?: FsmActionLogAvgAggregateInputType
  _sum?: FsmActionLogSumAggregateInputType
  _min?: FsmActionLogMinAggregateInputType
  _max?: FsmActionLogMaxAggregateInputType
}

export type FsmActionLogGroupByOutputType = {
  id: number
  entity_type: string
  entity_id: number
  action_name: string
  from_state: string
  to_state: string
  user_id: number
  created_at: Date
  _count: FsmActionLogCountAggregateOutputType | null
  _avg: FsmActionLogAvgAggregateOutputType | null
  _sum: FsmActionLogSumAggregateOutputType | null
  _min: FsmActionLogMinAggregateOutputType | null
  _max: FsmActionLogMaxAggregateOutputType | null
}

type GetFsmActionLogGroupByPayload<T extends FsmActionLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FsmActionLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FsmActionLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FsmActionLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FsmActionLogGroupByOutputType[P]>
      }
    >
  >



export type FsmActionLogWhereInput = {
  AND?: Prisma.FsmActionLogWhereInput | Prisma.FsmActionLogWhereInput[]
  OR?: Prisma.FsmActionLogWhereInput[]
  NOT?: Prisma.FsmActionLogWhereInput | Prisma.FsmActionLogWhereInput[]
  id?: Prisma.IntFilter<"FsmActionLog"> | number
  entity_type?: Prisma.StringFilter<"FsmActionLog"> | string
  entity_id?: Prisma.IntFilter<"FsmActionLog"> | number
  action_name?: Prisma.StringFilter<"FsmActionLog"> | string
  from_state?: Prisma.StringFilter<"FsmActionLog"> | string
  to_state?: Prisma.StringFilter<"FsmActionLog"> | string
  user_id?: Prisma.IntFilter<"FsmActionLog"> | number
  created_at?: Prisma.DateTimeFilter<"FsmActionLog"> | Date | string
}

export type FsmActionLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  entity_type?: Prisma.SortOrder
  entity_id?: Prisma.SortOrder
  action_name?: Prisma.SortOrder
  from_state?: Prisma.SortOrder
  to_state?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  _relevance?: Prisma.FsmActionLogOrderByRelevanceInput
}

export type FsmActionLogWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.FsmActionLogWhereInput | Prisma.FsmActionLogWhereInput[]
  OR?: Prisma.FsmActionLogWhereInput[]
  NOT?: Prisma.FsmActionLogWhereInput | Prisma.FsmActionLogWhereInput[]
  entity_type?: Prisma.StringFilter<"FsmActionLog"> | string
  entity_id?: Prisma.IntFilter<"FsmActionLog"> | number
  action_name?: Prisma.StringFilter<"FsmActionLog"> | string
  from_state?: Prisma.StringFilter<"FsmActionLog"> | string
  to_state?: Prisma.StringFilter<"FsmActionLog"> | string
  user_id?: Prisma.IntFilter<"FsmActionLog"> | number
  created_at?: Prisma.DateTimeFilter<"FsmActionLog"> | Date | string
}, "id">

export type FsmActionLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  entity_type?: Prisma.SortOrder
  entity_id?: Prisma.SortOrder
  action_name?: Prisma.SortOrder
  from_state?: Prisma.SortOrder
  to_state?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  _count?: Prisma.FsmActionLogCountOrderByAggregateInput
  _avg?: Prisma.FsmActionLogAvgOrderByAggregateInput
  _max?: Prisma.FsmActionLogMaxOrderByAggregateInput
  _min?: Prisma.FsmActionLogMinOrderByAggregateInput
  _sum?: Prisma.FsmActionLogSumOrderByAggregateInput
}

export type FsmActionLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.FsmActionLogScalarWhereWithAggregatesInput | Prisma.FsmActionLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.FsmActionLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FsmActionLogScalarWhereWithAggregatesInput | Prisma.FsmActionLogScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"FsmActionLog"> | number
  entity_type?: Prisma.StringWithAggregatesFilter<"FsmActionLog"> | string
  entity_id?: Prisma.IntWithAggregatesFilter<"FsmActionLog"> | number
  action_name?: Prisma.StringWithAggregatesFilter<"FsmActionLog"> | string
  from_state?: Prisma.StringWithAggregatesFilter<"FsmActionLog"> | string
  to_state?: Prisma.StringWithAggregatesFilter<"FsmActionLog"> | string
  user_id?: Prisma.IntWithAggregatesFilter<"FsmActionLog"> | number
  created_at?: Prisma.DateTimeWithAggregatesFilter<"FsmActionLog"> | Date | string
}

export type FsmActionLogCreateInput = {
  entity_type: string
  entity_id: number
  action_name: string
  from_state: string
  to_state: string
  user_id: number
  created_at?: Date | string
}

export type FsmActionLogUncheckedCreateInput = {
  id?: number
  entity_type: string
  entity_id: number
  action_name: string
  from_state: string
  to_state: string
  user_id: number
  created_at?: Date | string
}

export type FsmActionLogUpdateInput = {
  entity_type?: Prisma.StringFieldUpdateOperationsInput | string
  entity_id?: Prisma.IntFieldUpdateOperationsInput | number
  action_name?: Prisma.StringFieldUpdateOperationsInput | string
  from_state?: Prisma.StringFieldUpdateOperationsInput | string
  to_state?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FsmActionLogUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  entity_type?: Prisma.StringFieldUpdateOperationsInput | string
  entity_id?: Prisma.IntFieldUpdateOperationsInput | number
  action_name?: Prisma.StringFieldUpdateOperationsInput | string
  from_state?: Prisma.StringFieldUpdateOperationsInput | string
  to_state?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FsmActionLogCreateManyInput = {
  id?: number
  entity_type: string
  entity_id: number
  action_name: string
  from_state: string
  to_state: string
  user_id: number
  created_at?: Date | string
}

export type FsmActionLogUpdateManyMutationInput = {
  entity_type?: Prisma.StringFieldUpdateOperationsInput | string
  entity_id?: Prisma.IntFieldUpdateOperationsInput | number
  action_name?: Prisma.StringFieldUpdateOperationsInput | string
  from_state?: Prisma.StringFieldUpdateOperationsInput | string
  to_state?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FsmActionLogUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  entity_type?: Prisma.StringFieldUpdateOperationsInput | string
  entity_id?: Prisma.IntFieldUpdateOperationsInput | number
  action_name?: Prisma.StringFieldUpdateOperationsInput | string
  from_state?: Prisma.StringFieldUpdateOperationsInput | string
  to_state?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FsmActionLogOrderByRelevanceInput = {
  fields: Prisma.FsmActionLogOrderByRelevanceFieldEnum | Prisma.FsmActionLogOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type FsmActionLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entity_type?: Prisma.SortOrder
  entity_id?: Prisma.SortOrder
  action_name?: Prisma.SortOrder
  from_state?: Prisma.SortOrder
  to_state?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type FsmActionLogAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entity_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type FsmActionLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entity_type?: Prisma.SortOrder
  entity_id?: Prisma.SortOrder
  action_name?: Prisma.SortOrder
  from_state?: Prisma.SortOrder
  to_state?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type FsmActionLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entity_type?: Prisma.SortOrder
  entity_id?: Prisma.SortOrder
  action_name?: Prisma.SortOrder
  from_state?: Prisma.SortOrder
  to_state?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type FsmActionLogSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entity_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type FsmActionLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  entity_type?: boolean
  entity_id?: boolean
  action_name?: boolean
  from_state?: boolean
  to_state?: boolean
  user_id?: boolean
  created_at?: boolean
}, ExtArgs["result"]["fsmActionLog"]>



export type FsmActionLogSelectScalar = {
  id?: boolean
  entity_type?: boolean
  entity_id?: boolean
  action_name?: boolean
  from_state?: boolean
  to_state?: boolean
  user_id?: boolean
  created_at?: boolean
}

export type FsmActionLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "entity_type" | "entity_id" | "action_name" | "from_state" | "to_state" | "user_id" | "created_at", ExtArgs["result"]["fsmActionLog"]>

export type $FsmActionLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FsmActionLog"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    entity_type: string
    entity_id: number
    action_name: string
    from_state: string
    to_state: string
    user_id: number
    created_at: Date
  }, ExtArgs["result"]["fsmActionLog"]>
  composites: {}
}

export type FsmActionLogGetPayload<S extends boolean | null | undefined | FsmActionLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FsmActionLogPayload, S>

export type FsmActionLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FsmActionLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FsmActionLogCountAggregateInputType | true
  }

export interface FsmActionLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FsmActionLog'], meta: { name: 'FsmActionLog' } }
  /**
   * Find zero or one FsmActionLog that matches the filter.
   * @param {FsmActionLogFindUniqueArgs} args - Arguments to find a FsmActionLog
   * @example
   * // Get one FsmActionLog
   * const fsmActionLog = await prisma.fsmActionLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FsmActionLogFindUniqueArgs>(args: Prisma.SelectSubset<T, FsmActionLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FsmActionLogClient<runtime.Types.Result.GetResult<Prisma.$FsmActionLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FsmActionLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FsmActionLogFindUniqueOrThrowArgs} args - Arguments to find a FsmActionLog
   * @example
   * // Get one FsmActionLog
   * const fsmActionLog = await prisma.fsmActionLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FsmActionLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FsmActionLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FsmActionLogClient<runtime.Types.Result.GetResult<Prisma.$FsmActionLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FsmActionLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmActionLogFindFirstArgs} args - Arguments to find a FsmActionLog
   * @example
   * // Get one FsmActionLog
   * const fsmActionLog = await prisma.fsmActionLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FsmActionLogFindFirstArgs>(args?: Prisma.SelectSubset<T, FsmActionLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__FsmActionLogClient<runtime.Types.Result.GetResult<Prisma.$FsmActionLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FsmActionLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmActionLogFindFirstOrThrowArgs} args - Arguments to find a FsmActionLog
   * @example
   * // Get one FsmActionLog
   * const fsmActionLog = await prisma.fsmActionLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FsmActionLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FsmActionLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FsmActionLogClient<runtime.Types.Result.GetResult<Prisma.$FsmActionLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FsmActionLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmActionLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FsmActionLogs
   * const fsmActionLogs = await prisma.fsmActionLog.findMany()
   * 
   * // Get first 10 FsmActionLogs
   * const fsmActionLogs = await prisma.fsmActionLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const fsmActionLogWithIdOnly = await prisma.fsmActionLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FsmActionLogFindManyArgs>(args?: Prisma.SelectSubset<T, FsmActionLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FsmActionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FsmActionLog.
   * @param {FsmActionLogCreateArgs} args - Arguments to create a FsmActionLog.
   * @example
   * // Create one FsmActionLog
   * const FsmActionLog = await prisma.fsmActionLog.create({
   *   data: {
   *     // ... data to create a FsmActionLog
   *   }
   * })
   * 
   */
  create<T extends FsmActionLogCreateArgs>(args: Prisma.SelectSubset<T, FsmActionLogCreateArgs<ExtArgs>>): Prisma.Prisma__FsmActionLogClient<runtime.Types.Result.GetResult<Prisma.$FsmActionLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FsmActionLogs.
   * @param {FsmActionLogCreateManyArgs} args - Arguments to create many FsmActionLogs.
   * @example
   * // Create many FsmActionLogs
   * const fsmActionLog = await prisma.fsmActionLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FsmActionLogCreateManyArgs>(args?: Prisma.SelectSubset<T, FsmActionLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a FsmActionLog.
   * @param {FsmActionLogDeleteArgs} args - Arguments to delete one FsmActionLog.
   * @example
   * // Delete one FsmActionLog
   * const FsmActionLog = await prisma.fsmActionLog.delete({
   *   where: {
   *     // ... filter to delete one FsmActionLog
   *   }
   * })
   * 
   */
  delete<T extends FsmActionLogDeleteArgs>(args: Prisma.SelectSubset<T, FsmActionLogDeleteArgs<ExtArgs>>): Prisma.Prisma__FsmActionLogClient<runtime.Types.Result.GetResult<Prisma.$FsmActionLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FsmActionLog.
   * @param {FsmActionLogUpdateArgs} args - Arguments to update one FsmActionLog.
   * @example
   * // Update one FsmActionLog
   * const fsmActionLog = await prisma.fsmActionLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FsmActionLogUpdateArgs>(args: Prisma.SelectSubset<T, FsmActionLogUpdateArgs<ExtArgs>>): Prisma.Prisma__FsmActionLogClient<runtime.Types.Result.GetResult<Prisma.$FsmActionLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FsmActionLogs.
   * @param {FsmActionLogDeleteManyArgs} args - Arguments to filter FsmActionLogs to delete.
   * @example
   * // Delete a few FsmActionLogs
   * const { count } = await prisma.fsmActionLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FsmActionLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, FsmActionLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FsmActionLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmActionLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FsmActionLogs
   * const fsmActionLog = await prisma.fsmActionLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FsmActionLogUpdateManyArgs>(args: Prisma.SelectSubset<T, FsmActionLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one FsmActionLog.
   * @param {FsmActionLogUpsertArgs} args - Arguments to update or create a FsmActionLog.
   * @example
   * // Update or create a FsmActionLog
   * const fsmActionLog = await prisma.fsmActionLog.upsert({
   *   create: {
   *     // ... data to create a FsmActionLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FsmActionLog we want to update
   *   }
   * })
   */
  upsert<T extends FsmActionLogUpsertArgs>(args: Prisma.SelectSubset<T, FsmActionLogUpsertArgs<ExtArgs>>): Prisma.Prisma__FsmActionLogClient<runtime.Types.Result.GetResult<Prisma.$FsmActionLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FsmActionLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmActionLogCountArgs} args - Arguments to filter FsmActionLogs to count.
   * @example
   * // Count the number of FsmActionLogs
   * const count = await prisma.fsmActionLog.count({
   *   where: {
   *     // ... the filter for the FsmActionLogs we want to count
   *   }
   * })
  **/
  count<T extends FsmActionLogCountArgs>(
    args?: Prisma.Subset<T, FsmActionLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FsmActionLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FsmActionLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmActionLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FsmActionLogAggregateArgs>(args: Prisma.Subset<T, FsmActionLogAggregateArgs>): Prisma.PrismaPromise<GetFsmActionLogAggregateType<T>>

  /**
   * Group by FsmActionLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmActionLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FsmActionLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FsmActionLogGroupByArgs['orderBy'] }
      : { orderBy?: FsmActionLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FsmActionLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFsmActionLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FsmActionLog model
 */
readonly fields: FsmActionLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FsmActionLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FsmActionLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FsmActionLog model
 */
export interface FsmActionLogFieldRefs {
  readonly id: Prisma.FieldRef<"FsmActionLog", 'Int'>
  readonly entity_type: Prisma.FieldRef<"FsmActionLog", 'String'>
  readonly entity_id: Prisma.FieldRef<"FsmActionLog", 'Int'>
  readonly action_name: Prisma.FieldRef<"FsmActionLog", 'String'>
  readonly from_state: Prisma.FieldRef<"FsmActionLog", 'String'>
  readonly to_state: Prisma.FieldRef<"FsmActionLog", 'String'>
  readonly user_id: Prisma.FieldRef<"FsmActionLog", 'Int'>
  readonly created_at: Prisma.FieldRef<"FsmActionLog", 'DateTime'>
}
    

// Custom InputTypes
/**
 * FsmActionLog findUnique
 */
export type FsmActionLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmActionLog
   */
  select?: Prisma.FsmActionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmActionLog
   */
  omit?: Prisma.FsmActionLogOmit<ExtArgs> | null
  /**
   * Filter, which FsmActionLog to fetch.
   */
  where: Prisma.FsmActionLogWhereUniqueInput
}

/**
 * FsmActionLog findUniqueOrThrow
 */
export type FsmActionLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmActionLog
   */
  select?: Prisma.FsmActionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmActionLog
   */
  omit?: Prisma.FsmActionLogOmit<ExtArgs> | null
  /**
   * Filter, which FsmActionLog to fetch.
   */
  where: Prisma.FsmActionLogWhereUniqueInput
}

/**
 * FsmActionLog findFirst
 */
export type FsmActionLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmActionLog
   */
  select?: Prisma.FsmActionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmActionLog
   */
  omit?: Prisma.FsmActionLogOmit<ExtArgs> | null
  /**
   * Filter, which FsmActionLog to fetch.
   */
  where?: Prisma.FsmActionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmActionLogs to fetch.
   */
  orderBy?: Prisma.FsmActionLogOrderByWithRelationInput | Prisma.FsmActionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FsmActionLogs.
   */
  cursor?: Prisma.FsmActionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmActionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmActionLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FsmActionLogs.
   */
  distinct?: Prisma.FsmActionLogScalarFieldEnum | Prisma.FsmActionLogScalarFieldEnum[]
}

/**
 * FsmActionLog findFirstOrThrow
 */
export type FsmActionLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmActionLog
   */
  select?: Prisma.FsmActionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmActionLog
   */
  omit?: Prisma.FsmActionLogOmit<ExtArgs> | null
  /**
   * Filter, which FsmActionLog to fetch.
   */
  where?: Prisma.FsmActionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmActionLogs to fetch.
   */
  orderBy?: Prisma.FsmActionLogOrderByWithRelationInput | Prisma.FsmActionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FsmActionLogs.
   */
  cursor?: Prisma.FsmActionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmActionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmActionLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FsmActionLogs.
   */
  distinct?: Prisma.FsmActionLogScalarFieldEnum | Prisma.FsmActionLogScalarFieldEnum[]
}

/**
 * FsmActionLog findMany
 */
export type FsmActionLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmActionLog
   */
  select?: Prisma.FsmActionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmActionLog
   */
  omit?: Prisma.FsmActionLogOmit<ExtArgs> | null
  /**
   * Filter, which FsmActionLogs to fetch.
   */
  where?: Prisma.FsmActionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmActionLogs to fetch.
   */
  orderBy?: Prisma.FsmActionLogOrderByWithRelationInput | Prisma.FsmActionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FsmActionLogs.
   */
  cursor?: Prisma.FsmActionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmActionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmActionLogs.
   */
  skip?: number
  distinct?: Prisma.FsmActionLogScalarFieldEnum | Prisma.FsmActionLogScalarFieldEnum[]
}

/**
 * FsmActionLog create
 */
export type FsmActionLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmActionLog
   */
  select?: Prisma.FsmActionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmActionLog
   */
  omit?: Prisma.FsmActionLogOmit<ExtArgs> | null
  /**
   * The data needed to create a FsmActionLog.
   */
  data: Prisma.XOR<Prisma.FsmActionLogCreateInput, Prisma.FsmActionLogUncheckedCreateInput>
}

/**
 * FsmActionLog createMany
 */
export type FsmActionLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FsmActionLogs.
   */
  data: Prisma.FsmActionLogCreateManyInput | Prisma.FsmActionLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FsmActionLog update
 */
export type FsmActionLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmActionLog
   */
  select?: Prisma.FsmActionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmActionLog
   */
  omit?: Prisma.FsmActionLogOmit<ExtArgs> | null
  /**
   * The data needed to update a FsmActionLog.
   */
  data: Prisma.XOR<Prisma.FsmActionLogUpdateInput, Prisma.FsmActionLogUncheckedUpdateInput>
  /**
   * Choose, which FsmActionLog to update.
   */
  where: Prisma.FsmActionLogWhereUniqueInput
}

/**
 * FsmActionLog updateMany
 */
export type FsmActionLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FsmActionLogs.
   */
  data: Prisma.XOR<Prisma.FsmActionLogUpdateManyMutationInput, Prisma.FsmActionLogUncheckedUpdateManyInput>
  /**
   * Filter which FsmActionLogs to update
   */
  where?: Prisma.FsmActionLogWhereInput
  /**
   * Limit how many FsmActionLogs to update.
   */
  limit?: number
}

/**
 * FsmActionLog upsert
 */
export type FsmActionLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmActionLog
   */
  select?: Prisma.FsmActionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmActionLog
   */
  omit?: Prisma.FsmActionLogOmit<ExtArgs> | null
  /**
   * The filter to search for the FsmActionLog to update in case it exists.
   */
  where: Prisma.FsmActionLogWhereUniqueInput
  /**
   * In case the FsmActionLog found by the `where` argument doesn't exist, create a new FsmActionLog with this data.
   */
  create: Prisma.XOR<Prisma.FsmActionLogCreateInput, Prisma.FsmActionLogUncheckedCreateInput>
  /**
   * In case the FsmActionLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FsmActionLogUpdateInput, Prisma.FsmActionLogUncheckedUpdateInput>
}

/**
 * FsmActionLog delete
 */
export type FsmActionLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmActionLog
   */
  select?: Prisma.FsmActionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmActionLog
   */
  omit?: Prisma.FsmActionLogOmit<ExtArgs> | null
  /**
   * Filter which FsmActionLog to delete.
   */
  where: Prisma.FsmActionLogWhereUniqueInput
}

/**
 * FsmActionLog deleteMany
 */
export type FsmActionLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FsmActionLogs to delete
   */
  where?: Prisma.FsmActionLogWhereInput
  /**
   * Limit how many FsmActionLogs to delete.
   */
  limit?: number
}

/**
 * FsmActionLog without action
 */
export type FsmActionLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmActionLog
   */
  select?: Prisma.FsmActionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmActionLog
   */
  omit?: Prisma.FsmActionLogOmit<ExtArgs> | null
}
