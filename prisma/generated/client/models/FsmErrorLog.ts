
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `FsmErrorLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model FsmErrorLog
 * 
 */
export type FsmErrorLogModel = runtime.Types.Result.DefaultSelection<Prisma.$FsmErrorLogPayload>

export type AggregateFsmErrorLog = {
  _count: FsmErrorLogCountAggregateOutputType | null
  _avg: FsmErrorLogAvgAggregateOutputType | null
  _sum: FsmErrorLogSumAggregateOutputType | null
  _min: FsmErrorLogMinAggregateOutputType | null
  _max: FsmErrorLogMaxAggregateOutputType | null
}

export type FsmErrorLogAvgAggregateOutputType = {
  id: number | null
  entity_id: number | null
  user_id: number | null
}

export type FsmErrorLogSumAggregateOutputType = {
  id: number | null
  entity_id: number | null
  user_id: number | null
}

export type FsmErrorLogMinAggregateOutputType = {
  id: number | null
  error_time: Date | null
  error_message: string | null
  entity_type: string | null
  entity_id: number | null
  action_name: string | null
  user_id: number | null
}

export type FsmErrorLogMaxAggregateOutputType = {
  id: number | null
  error_time: Date | null
  error_message: string | null
  entity_type: string | null
  entity_id: number | null
  action_name: string | null
  user_id: number | null
}

export type FsmErrorLogCountAggregateOutputType = {
  id: number
  error_time: number
  error_message: number
  entity_type: number
  entity_id: number
  action_name: number
  user_id: number
  _all: number
}


export type FsmErrorLogAvgAggregateInputType = {
  id?: true
  entity_id?: true
  user_id?: true
}

export type FsmErrorLogSumAggregateInputType = {
  id?: true
  entity_id?: true
  user_id?: true
}

export type FsmErrorLogMinAggregateInputType = {
  id?: true
  error_time?: true
  error_message?: true
  entity_type?: true
  entity_id?: true
  action_name?: true
  user_id?: true
}

export type FsmErrorLogMaxAggregateInputType = {
  id?: true
  error_time?: true
  error_message?: true
  entity_type?: true
  entity_id?: true
  action_name?: true
  user_id?: true
}

export type FsmErrorLogCountAggregateInputType = {
  id?: true
  error_time?: true
  error_message?: true
  entity_type?: true
  entity_id?: true
  action_name?: true
  user_id?: true
  _all?: true
}

export type FsmErrorLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FsmErrorLog to aggregate.
   */
  where?: Prisma.FsmErrorLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmErrorLogs to fetch.
   */
  orderBy?: Prisma.FsmErrorLogOrderByWithRelationInput | Prisma.FsmErrorLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FsmErrorLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmErrorLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmErrorLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FsmErrorLogs
  **/
  _count?: true | FsmErrorLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FsmErrorLogAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FsmErrorLogSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FsmErrorLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FsmErrorLogMaxAggregateInputType
}

export type GetFsmErrorLogAggregateType<T extends FsmErrorLogAggregateArgs> = {
      [P in keyof T & keyof AggregateFsmErrorLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFsmErrorLog[P]>
    : Prisma.GetScalarType<T[P], AggregateFsmErrorLog[P]>
}




export type FsmErrorLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FsmErrorLogWhereInput
  orderBy?: Prisma.FsmErrorLogOrderByWithAggregationInput | Prisma.FsmErrorLogOrderByWithAggregationInput[]
  by: Prisma.FsmErrorLogScalarFieldEnum[] | Prisma.FsmErrorLogScalarFieldEnum
  having?: Prisma.FsmErrorLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FsmErrorLogCountAggregateInputType | true
  _avg?: FsmErrorLogAvgAggregateInputType
  _sum?: FsmErrorLogSumAggregateInputType
  _min?: FsmErrorLogMinAggregateInputType
  _max?: FsmErrorLogMaxAggregateInputType
}

export type FsmErrorLogGroupByOutputType = {
  id: number
  error_time: Date
  error_message: string
  entity_type: string
  entity_id: number
  action_name: string
  user_id: number
  _count: FsmErrorLogCountAggregateOutputType | null
  _avg: FsmErrorLogAvgAggregateOutputType | null
  _sum: FsmErrorLogSumAggregateOutputType | null
  _min: FsmErrorLogMinAggregateOutputType | null
  _max: FsmErrorLogMaxAggregateOutputType | null
}

type GetFsmErrorLogGroupByPayload<T extends FsmErrorLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FsmErrorLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FsmErrorLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FsmErrorLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FsmErrorLogGroupByOutputType[P]>
      }
    >
  >



export type FsmErrorLogWhereInput = {
  AND?: Prisma.FsmErrorLogWhereInput | Prisma.FsmErrorLogWhereInput[]
  OR?: Prisma.FsmErrorLogWhereInput[]
  NOT?: Prisma.FsmErrorLogWhereInput | Prisma.FsmErrorLogWhereInput[]
  id?: Prisma.IntFilter<"FsmErrorLog"> | number
  error_time?: Prisma.DateTimeFilter<"FsmErrorLog"> | Date | string
  error_message?: Prisma.StringFilter<"FsmErrorLog"> | string
  entity_type?: Prisma.StringFilter<"FsmErrorLog"> | string
  entity_id?: Prisma.IntFilter<"FsmErrorLog"> | number
  action_name?: Prisma.StringFilter<"FsmErrorLog"> | string
  user_id?: Prisma.IntFilter<"FsmErrorLog"> | number
}

export type FsmErrorLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  error_time?: Prisma.SortOrder
  error_message?: Prisma.SortOrder
  entity_type?: Prisma.SortOrder
  entity_id?: Prisma.SortOrder
  action_name?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  _relevance?: Prisma.FsmErrorLogOrderByRelevanceInput
}

export type FsmErrorLogWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.FsmErrorLogWhereInput | Prisma.FsmErrorLogWhereInput[]
  OR?: Prisma.FsmErrorLogWhereInput[]
  NOT?: Prisma.FsmErrorLogWhereInput | Prisma.FsmErrorLogWhereInput[]
  error_time?: Prisma.DateTimeFilter<"FsmErrorLog"> | Date | string
  error_message?: Prisma.StringFilter<"FsmErrorLog"> | string
  entity_type?: Prisma.StringFilter<"FsmErrorLog"> | string
  entity_id?: Prisma.IntFilter<"FsmErrorLog"> | number
  action_name?: Prisma.StringFilter<"FsmErrorLog"> | string
  user_id?: Prisma.IntFilter<"FsmErrorLog"> | number
}, "id">

export type FsmErrorLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  error_time?: Prisma.SortOrder
  error_message?: Prisma.SortOrder
  entity_type?: Prisma.SortOrder
  entity_id?: Prisma.SortOrder
  action_name?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  _count?: Prisma.FsmErrorLogCountOrderByAggregateInput
  _avg?: Prisma.FsmErrorLogAvgOrderByAggregateInput
  _max?: Prisma.FsmErrorLogMaxOrderByAggregateInput
  _min?: Prisma.FsmErrorLogMinOrderByAggregateInput
  _sum?: Prisma.FsmErrorLogSumOrderByAggregateInput
}

export type FsmErrorLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.FsmErrorLogScalarWhereWithAggregatesInput | Prisma.FsmErrorLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.FsmErrorLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FsmErrorLogScalarWhereWithAggregatesInput | Prisma.FsmErrorLogScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"FsmErrorLog"> | number
  error_time?: Prisma.DateTimeWithAggregatesFilter<"FsmErrorLog"> | Date | string
  error_message?: Prisma.StringWithAggregatesFilter<"FsmErrorLog"> | string
  entity_type?: Prisma.StringWithAggregatesFilter<"FsmErrorLog"> | string
  entity_id?: Prisma.IntWithAggregatesFilter<"FsmErrorLog"> | number
  action_name?: Prisma.StringWithAggregatesFilter<"FsmErrorLog"> | string
  user_id?: Prisma.IntWithAggregatesFilter<"FsmErrorLog"> | number
}

export type FsmErrorLogCreateInput = {
  error_time?: Date | string
  error_message: string
  entity_type: string
  entity_id: number
  action_name: string
  user_id: number
}

export type FsmErrorLogUncheckedCreateInput = {
  id?: number
  error_time?: Date | string
  error_message: string
  entity_type: string
  entity_id: number
  action_name: string
  user_id: number
}

export type FsmErrorLogUpdateInput = {
  error_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  error_message?: Prisma.StringFieldUpdateOperationsInput | string
  entity_type?: Prisma.StringFieldUpdateOperationsInput | string
  entity_id?: Prisma.IntFieldUpdateOperationsInput | number
  action_name?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FsmErrorLogUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  error_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  error_message?: Prisma.StringFieldUpdateOperationsInput | string
  entity_type?: Prisma.StringFieldUpdateOperationsInput | string
  entity_id?: Prisma.IntFieldUpdateOperationsInput | number
  action_name?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FsmErrorLogCreateManyInput = {
  id?: number
  error_time?: Date | string
  error_message: string
  entity_type: string
  entity_id: number
  action_name: string
  user_id: number
}

export type FsmErrorLogUpdateManyMutationInput = {
  error_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  error_message?: Prisma.StringFieldUpdateOperationsInput | string
  entity_type?: Prisma.StringFieldUpdateOperationsInput | string
  entity_id?: Prisma.IntFieldUpdateOperationsInput | number
  action_name?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FsmErrorLogUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  error_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  error_message?: Prisma.StringFieldUpdateOperationsInput | string
  entity_type?: Prisma.StringFieldUpdateOperationsInput | string
  entity_id?: Prisma.IntFieldUpdateOperationsInput | number
  action_name?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FsmErrorLogOrderByRelevanceInput = {
  fields: Prisma.FsmErrorLogOrderByRelevanceFieldEnum | Prisma.FsmErrorLogOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type FsmErrorLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  error_time?: Prisma.SortOrder
  error_message?: Prisma.SortOrder
  entity_type?: Prisma.SortOrder
  entity_id?: Prisma.SortOrder
  action_name?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type FsmErrorLogAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entity_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type FsmErrorLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  error_time?: Prisma.SortOrder
  error_message?: Prisma.SortOrder
  entity_type?: Prisma.SortOrder
  entity_id?: Prisma.SortOrder
  action_name?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type FsmErrorLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  error_time?: Prisma.SortOrder
  error_message?: Prisma.SortOrder
  entity_type?: Prisma.SortOrder
  entity_id?: Prisma.SortOrder
  action_name?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type FsmErrorLogSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entity_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}



export type FsmErrorLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  error_time?: boolean
  error_message?: boolean
  entity_type?: boolean
  entity_id?: boolean
  action_name?: boolean
  user_id?: boolean
}, ExtArgs["result"]["fsmErrorLog"]>



export type FsmErrorLogSelectScalar = {
  id?: boolean
  error_time?: boolean
  error_message?: boolean
  entity_type?: boolean
  entity_id?: boolean
  action_name?: boolean
  user_id?: boolean
}

export type FsmErrorLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "error_time" | "error_message" | "entity_type" | "entity_id" | "action_name" | "user_id", ExtArgs["result"]["fsmErrorLog"]>

export type $FsmErrorLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FsmErrorLog"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    error_time: Date
    error_message: string
    entity_type: string
    entity_id: number
    action_name: string
    user_id: number
  }, ExtArgs["result"]["fsmErrorLog"]>
  composites: {}
}

export type FsmErrorLogGetPayload<S extends boolean | null | undefined | FsmErrorLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FsmErrorLogPayload, S>

export type FsmErrorLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FsmErrorLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FsmErrorLogCountAggregateInputType | true
  }

export interface FsmErrorLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FsmErrorLog'], meta: { name: 'FsmErrorLog' } }
  /**
   * Find zero or one FsmErrorLog that matches the filter.
   * @param {FsmErrorLogFindUniqueArgs} args - Arguments to find a FsmErrorLog
   * @example
   * // Get one FsmErrorLog
   * const fsmErrorLog = await prisma.fsmErrorLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FsmErrorLogFindUniqueArgs>(args: Prisma.SelectSubset<T, FsmErrorLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FsmErrorLogClient<runtime.Types.Result.GetResult<Prisma.$FsmErrorLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FsmErrorLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FsmErrorLogFindUniqueOrThrowArgs} args - Arguments to find a FsmErrorLog
   * @example
   * // Get one FsmErrorLog
   * const fsmErrorLog = await prisma.fsmErrorLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FsmErrorLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FsmErrorLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FsmErrorLogClient<runtime.Types.Result.GetResult<Prisma.$FsmErrorLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FsmErrorLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmErrorLogFindFirstArgs} args - Arguments to find a FsmErrorLog
   * @example
   * // Get one FsmErrorLog
   * const fsmErrorLog = await prisma.fsmErrorLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FsmErrorLogFindFirstArgs>(args?: Prisma.SelectSubset<T, FsmErrorLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__FsmErrorLogClient<runtime.Types.Result.GetResult<Prisma.$FsmErrorLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FsmErrorLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmErrorLogFindFirstOrThrowArgs} args - Arguments to find a FsmErrorLog
   * @example
   * // Get one FsmErrorLog
   * const fsmErrorLog = await prisma.fsmErrorLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FsmErrorLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FsmErrorLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FsmErrorLogClient<runtime.Types.Result.GetResult<Prisma.$FsmErrorLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FsmErrorLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmErrorLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FsmErrorLogs
   * const fsmErrorLogs = await prisma.fsmErrorLog.findMany()
   * 
   * // Get first 10 FsmErrorLogs
   * const fsmErrorLogs = await prisma.fsmErrorLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const fsmErrorLogWithIdOnly = await prisma.fsmErrorLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FsmErrorLogFindManyArgs>(args?: Prisma.SelectSubset<T, FsmErrorLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FsmErrorLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FsmErrorLog.
   * @param {FsmErrorLogCreateArgs} args - Arguments to create a FsmErrorLog.
   * @example
   * // Create one FsmErrorLog
   * const FsmErrorLog = await prisma.fsmErrorLog.create({
   *   data: {
   *     // ... data to create a FsmErrorLog
   *   }
   * })
   * 
   */
  create<T extends FsmErrorLogCreateArgs>(args: Prisma.SelectSubset<T, FsmErrorLogCreateArgs<ExtArgs>>): Prisma.Prisma__FsmErrorLogClient<runtime.Types.Result.GetResult<Prisma.$FsmErrorLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FsmErrorLogs.
   * @param {FsmErrorLogCreateManyArgs} args - Arguments to create many FsmErrorLogs.
   * @example
   * // Create many FsmErrorLogs
   * const fsmErrorLog = await prisma.fsmErrorLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FsmErrorLogCreateManyArgs>(args?: Prisma.SelectSubset<T, FsmErrorLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a FsmErrorLog.
   * @param {FsmErrorLogDeleteArgs} args - Arguments to delete one FsmErrorLog.
   * @example
   * // Delete one FsmErrorLog
   * const FsmErrorLog = await prisma.fsmErrorLog.delete({
   *   where: {
   *     // ... filter to delete one FsmErrorLog
   *   }
   * })
   * 
   */
  delete<T extends FsmErrorLogDeleteArgs>(args: Prisma.SelectSubset<T, FsmErrorLogDeleteArgs<ExtArgs>>): Prisma.Prisma__FsmErrorLogClient<runtime.Types.Result.GetResult<Prisma.$FsmErrorLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FsmErrorLog.
   * @param {FsmErrorLogUpdateArgs} args - Arguments to update one FsmErrorLog.
   * @example
   * // Update one FsmErrorLog
   * const fsmErrorLog = await prisma.fsmErrorLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FsmErrorLogUpdateArgs>(args: Prisma.SelectSubset<T, FsmErrorLogUpdateArgs<ExtArgs>>): Prisma.Prisma__FsmErrorLogClient<runtime.Types.Result.GetResult<Prisma.$FsmErrorLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FsmErrorLogs.
   * @param {FsmErrorLogDeleteManyArgs} args - Arguments to filter FsmErrorLogs to delete.
   * @example
   * // Delete a few FsmErrorLogs
   * const { count } = await prisma.fsmErrorLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FsmErrorLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, FsmErrorLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FsmErrorLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmErrorLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FsmErrorLogs
   * const fsmErrorLog = await prisma.fsmErrorLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FsmErrorLogUpdateManyArgs>(args: Prisma.SelectSubset<T, FsmErrorLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one FsmErrorLog.
   * @param {FsmErrorLogUpsertArgs} args - Arguments to update or create a FsmErrorLog.
   * @example
   * // Update or create a FsmErrorLog
   * const fsmErrorLog = await prisma.fsmErrorLog.upsert({
   *   create: {
   *     // ... data to create a FsmErrorLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FsmErrorLog we want to update
   *   }
   * })
   */
  upsert<T extends FsmErrorLogUpsertArgs>(args: Prisma.SelectSubset<T, FsmErrorLogUpsertArgs<ExtArgs>>): Prisma.Prisma__FsmErrorLogClient<runtime.Types.Result.GetResult<Prisma.$FsmErrorLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FsmErrorLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmErrorLogCountArgs} args - Arguments to filter FsmErrorLogs to count.
   * @example
   * // Count the number of FsmErrorLogs
   * const count = await prisma.fsmErrorLog.count({
   *   where: {
   *     // ... the filter for the FsmErrorLogs we want to count
   *   }
   * })
  **/
  count<T extends FsmErrorLogCountArgs>(
    args?: Prisma.Subset<T, FsmErrorLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FsmErrorLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FsmErrorLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmErrorLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FsmErrorLogAggregateArgs>(args: Prisma.Subset<T, FsmErrorLogAggregateArgs>): Prisma.PrismaPromise<GetFsmErrorLogAggregateType<T>>

  /**
   * Group by FsmErrorLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmErrorLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FsmErrorLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FsmErrorLogGroupByArgs['orderBy'] }
      : { orderBy?: FsmErrorLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FsmErrorLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFsmErrorLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FsmErrorLog model
 */
readonly fields: FsmErrorLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FsmErrorLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FsmErrorLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FsmErrorLog model
 */
export interface FsmErrorLogFieldRefs {
  readonly id: Prisma.FieldRef<"FsmErrorLog", 'Int'>
  readonly error_time: Prisma.FieldRef<"FsmErrorLog", 'DateTime'>
  readonly error_message: Prisma.FieldRef<"FsmErrorLog", 'String'>
  readonly entity_type: Prisma.FieldRef<"FsmErrorLog", 'String'>
  readonly entity_id: Prisma.FieldRef<"FsmErrorLog", 'Int'>
  readonly action_name: Prisma.FieldRef<"FsmErrorLog", 'String'>
  readonly user_id: Prisma.FieldRef<"FsmErrorLog", 'Int'>
}
    

// Custom InputTypes
/**
 * FsmErrorLog findUnique
 */
export type FsmErrorLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmErrorLog
   */
  select?: Prisma.FsmErrorLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmErrorLog
   */
  omit?: Prisma.FsmErrorLogOmit<ExtArgs> | null
  /**
   * Filter, which FsmErrorLog to fetch.
   */
  where: Prisma.FsmErrorLogWhereUniqueInput
}

/**
 * FsmErrorLog findUniqueOrThrow
 */
export type FsmErrorLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmErrorLog
   */
  select?: Prisma.FsmErrorLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmErrorLog
   */
  omit?: Prisma.FsmErrorLogOmit<ExtArgs> | null
  /**
   * Filter, which FsmErrorLog to fetch.
   */
  where: Prisma.FsmErrorLogWhereUniqueInput
}

/**
 * FsmErrorLog findFirst
 */
export type FsmErrorLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmErrorLog
   */
  select?: Prisma.FsmErrorLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmErrorLog
   */
  omit?: Prisma.FsmErrorLogOmit<ExtArgs> | null
  /**
   * Filter, which FsmErrorLog to fetch.
   */
  where?: Prisma.FsmErrorLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmErrorLogs to fetch.
   */
  orderBy?: Prisma.FsmErrorLogOrderByWithRelationInput | Prisma.FsmErrorLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FsmErrorLogs.
   */
  cursor?: Prisma.FsmErrorLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmErrorLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmErrorLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FsmErrorLogs.
   */
  distinct?: Prisma.FsmErrorLogScalarFieldEnum | Prisma.FsmErrorLogScalarFieldEnum[]
}

/**
 * FsmErrorLog findFirstOrThrow
 */
export type FsmErrorLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmErrorLog
   */
  select?: Prisma.FsmErrorLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmErrorLog
   */
  omit?: Prisma.FsmErrorLogOmit<ExtArgs> | null
  /**
   * Filter, which FsmErrorLog to fetch.
   */
  where?: Prisma.FsmErrorLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmErrorLogs to fetch.
   */
  orderBy?: Prisma.FsmErrorLogOrderByWithRelationInput | Prisma.FsmErrorLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FsmErrorLogs.
   */
  cursor?: Prisma.FsmErrorLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmErrorLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmErrorLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FsmErrorLogs.
   */
  distinct?: Prisma.FsmErrorLogScalarFieldEnum | Prisma.FsmErrorLogScalarFieldEnum[]
}

/**
 * FsmErrorLog findMany
 */
export type FsmErrorLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmErrorLog
   */
  select?: Prisma.FsmErrorLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmErrorLog
   */
  omit?: Prisma.FsmErrorLogOmit<ExtArgs> | null
  /**
   * Filter, which FsmErrorLogs to fetch.
   */
  where?: Prisma.FsmErrorLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmErrorLogs to fetch.
   */
  orderBy?: Prisma.FsmErrorLogOrderByWithRelationInput | Prisma.FsmErrorLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FsmErrorLogs.
   */
  cursor?: Prisma.FsmErrorLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmErrorLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmErrorLogs.
   */
  skip?: number
  distinct?: Prisma.FsmErrorLogScalarFieldEnum | Prisma.FsmErrorLogScalarFieldEnum[]
}

/**
 * FsmErrorLog create
 */
export type FsmErrorLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmErrorLog
   */
  select?: Prisma.FsmErrorLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmErrorLog
   */
  omit?: Prisma.FsmErrorLogOmit<ExtArgs> | null
  /**
   * The data needed to create a FsmErrorLog.
   */
  data: Prisma.XOR<Prisma.FsmErrorLogCreateInput, Prisma.FsmErrorLogUncheckedCreateInput>
}

/**
 * FsmErrorLog createMany
 */
export type FsmErrorLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FsmErrorLogs.
   */
  data: Prisma.FsmErrorLogCreateManyInput | Prisma.FsmErrorLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FsmErrorLog update
 */
export type FsmErrorLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmErrorLog
   */
  select?: Prisma.FsmErrorLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmErrorLog
   */
  omit?: Prisma.FsmErrorLogOmit<ExtArgs> | null
  /**
   * The data needed to update a FsmErrorLog.
   */
  data: Prisma.XOR<Prisma.FsmErrorLogUpdateInput, Prisma.FsmErrorLogUncheckedUpdateInput>
  /**
   * Choose, which FsmErrorLog to update.
   */
  where: Prisma.FsmErrorLogWhereUniqueInput
}

/**
 * FsmErrorLog updateMany
 */
export type FsmErrorLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FsmErrorLogs.
   */
  data: Prisma.XOR<Prisma.FsmErrorLogUpdateManyMutationInput, Prisma.FsmErrorLogUncheckedUpdateManyInput>
  /**
   * Filter which FsmErrorLogs to update
   */
  where?: Prisma.FsmErrorLogWhereInput
  /**
   * Limit how many FsmErrorLogs to update.
   */
  limit?: number
}

/**
 * FsmErrorLog upsert
 */
export type FsmErrorLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmErrorLog
   */
  select?: Prisma.FsmErrorLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmErrorLog
   */
  omit?: Prisma.FsmErrorLogOmit<ExtArgs> | null
  /**
   * The filter to search for the FsmErrorLog to update in case it exists.
   */
  where: Prisma.FsmErrorLogWhereUniqueInput
  /**
   * In case the FsmErrorLog found by the `where` argument doesn't exist, create a new FsmErrorLog with this data.
   */
  create: Prisma.XOR<Prisma.FsmErrorLogCreateInput, Prisma.FsmErrorLogUncheckedCreateInput>
  /**
   * In case the FsmErrorLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FsmErrorLogUpdateInput, Prisma.FsmErrorLogUncheckedUpdateInput>
}

/**
 * FsmErrorLog delete
 */
export type FsmErrorLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmErrorLog
   */
  select?: Prisma.FsmErrorLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmErrorLog
   */
  omit?: Prisma.FsmErrorLogOmit<ExtArgs> | null
  /**
   * Filter which FsmErrorLog to delete.
   */
  where: Prisma.FsmErrorLogWhereUniqueInput
}

/**
 * FsmErrorLog deleteMany
 */
export type FsmErrorLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FsmErrorLogs to delete
   */
  where?: Prisma.FsmErrorLogWhereInput
  /**
   * Limit how many FsmErrorLogs to delete.
   */
  limit?: number
}

/**
 * FsmErrorLog without action
 */
export type FsmErrorLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmErrorLog
   */
  select?: Prisma.FsmErrorLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmErrorLog
   */
  omit?: Prisma.FsmErrorLogOmit<ExtArgs> | null
}
