
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `FsmAction` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model FsmAction
 * 
 */
export type FsmActionModel = runtime.Types.Result.DefaultSelection<Prisma.$FsmActionPayload>

export type AggregateFsmAction = {
  _count: FsmActionCountAggregateOutputType | null
  _avg: FsmActionAvgAggregateOutputType | null
  _sum: FsmActionSumAggregateOutputType | null
  _min: FsmActionMinAggregateOutputType | null
  _max: FsmActionMaxAggregateOutputType | null
}

export type FsmActionAvgAggregateOutputType = {
  id: number | null
}

export type FsmActionSumAggregateOutputType = {
  id: number | null
}

export type FsmActionMinAggregateOutputType = {
  id: number | null
  name: string | null
  label: string | null
}

export type FsmActionMaxAggregateOutputType = {
  id: number | null
  name: string | null
  label: string | null
}

export type FsmActionCountAggregateOutputType = {
  id: number
  name: number
  label: number
  _all: number
}


export type FsmActionAvgAggregateInputType = {
  id?: true
}

export type FsmActionSumAggregateInputType = {
  id?: true
}

export type FsmActionMinAggregateInputType = {
  id?: true
  name?: true
  label?: true
}

export type FsmActionMaxAggregateInputType = {
  id?: true
  name?: true
  label?: true
}

export type FsmActionCountAggregateInputType = {
  id?: true
  name?: true
  label?: true
  _all?: true
}

export type FsmActionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FsmAction to aggregate.
   */
  where?: Prisma.FsmActionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmActions to fetch.
   */
  orderBy?: Prisma.FsmActionOrderByWithRelationInput | Prisma.FsmActionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FsmActionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmActions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmActions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FsmActions
  **/
  _count?: true | FsmActionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FsmActionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FsmActionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FsmActionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FsmActionMaxAggregateInputType
}

export type GetFsmActionAggregateType<T extends FsmActionAggregateArgs> = {
      [P in keyof T & keyof AggregateFsmAction]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFsmAction[P]>
    : Prisma.GetScalarType<T[P], AggregateFsmAction[P]>
}




export type FsmActionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FsmActionWhereInput
  orderBy?: Prisma.FsmActionOrderByWithAggregationInput | Prisma.FsmActionOrderByWithAggregationInput[]
  by: Prisma.FsmActionScalarFieldEnum[] | Prisma.FsmActionScalarFieldEnum
  having?: Prisma.FsmActionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FsmActionCountAggregateInputType | true
  _avg?: FsmActionAvgAggregateInputType
  _sum?: FsmActionSumAggregateInputType
  _min?: FsmActionMinAggregateInputType
  _max?: FsmActionMaxAggregateInputType
}

export type FsmActionGroupByOutputType = {
  id: number
  name: string
  label: string | null
  _count: FsmActionCountAggregateOutputType | null
  _avg: FsmActionAvgAggregateOutputType | null
  _sum: FsmActionSumAggregateOutputType | null
  _min: FsmActionMinAggregateOutputType | null
  _max: FsmActionMaxAggregateOutputType | null
}

type GetFsmActionGroupByPayload<T extends FsmActionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FsmActionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FsmActionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FsmActionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FsmActionGroupByOutputType[P]>
      }
    >
  >



export type FsmActionWhereInput = {
  AND?: Prisma.FsmActionWhereInput | Prisma.FsmActionWhereInput[]
  OR?: Prisma.FsmActionWhereInput[]
  NOT?: Prisma.FsmActionWhereInput | Prisma.FsmActionWhereInput[]
  id?: Prisma.IntFilter<"FsmAction"> | number
  name?: Prisma.StringFilter<"FsmAction"> | string
  label?: Prisma.StringNullableFilter<"FsmAction"> | string | null
  transitions?: Prisma.FsmTransitionListRelationFilter
}

export type FsmActionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrderInput | Prisma.SortOrder
  transitions?: Prisma.FsmTransitionOrderByRelationAggregateInput
  _relevance?: Prisma.FsmActionOrderByRelevanceInput
}

export type FsmActionWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.FsmActionWhereInput | Prisma.FsmActionWhereInput[]
  OR?: Prisma.FsmActionWhereInput[]
  NOT?: Prisma.FsmActionWhereInput | Prisma.FsmActionWhereInput[]
  label?: Prisma.StringNullableFilter<"FsmAction"> | string | null
  transitions?: Prisma.FsmTransitionListRelationFilter
}, "id" | "name">

export type FsmActionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.FsmActionCountOrderByAggregateInput
  _avg?: Prisma.FsmActionAvgOrderByAggregateInput
  _max?: Prisma.FsmActionMaxOrderByAggregateInput
  _min?: Prisma.FsmActionMinOrderByAggregateInput
  _sum?: Prisma.FsmActionSumOrderByAggregateInput
}

export type FsmActionScalarWhereWithAggregatesInput = {
  AND?: Prisma.FsmActionScalarWhereWithAggregatesInput | Prisma.FsmActionScalarWhereWithAggregatesInput[]
  OR?: Prisma.FsmActionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FsmActionScalarWhereWithAggregatesInput | Prisma.FsmActionScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"FsmAction"> | number
  name?: Prisma.StringWithAggregatesFilter<"FsmAction"> | string
  label?: Prisma.StringNullableWithAggregatesFilter<"FsmAction"> | string | null
}

export type FsmActionCreateInput = {
  name: string
  label?: string | null
  transitions?: Prisma.FsmTransitionCreateNestedManyWithoutActionInput
}

export type FsmActionUncheckedCreateInput = {
  id?: number
  name: string
  label?: string | null
  transitions?: Prisma.FsmTransitionUncheckedCreateNestedManyWithoutActionInput
}

export type FsmActionUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transitions?: Prisma.FsmTransitionUpdateManyWithoutActionNestedInput
}

export type FsmActionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transitions?: Prisma.FsmTransitionUncheckedUpdateManyWithoutActionNestedInput
}

export type FsmActionCreateManyInput = {
  id?: number
  name: string
  label?: string | null
}

export type FsmActionUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FsmActionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FsmActionOrderByRelevanceInput = {
  fields: Prisma.FsmActionOrderByRelevanceFieldEnum | Prisma.FsmActionOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type FsmActionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrder
}

export type FsmActionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type FsmActionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrder
}

export type FsmActionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrder
}

export type FsmActionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type FsmActionScalarRelationFilter = {
  is?: Prisma.FsmActionWhereInput
  isNot?: Prisma.FsmActionWhereInput
}

export type FsmActionCreateNestedOneWithoutTransitionsInput = {
  create?: Prisma.XOR<Prisma.FsmActionCreateWithoutTransitionsInput, Prisma.FsmActionUncheckedCreateWithoutTransitionsInput>
  connectOrCreate?: Prisma.FsmActionCreateOrConnectWithoutTransitionsInput
  connect?: Prisma.FsmActionWhereUniqueInput
}

export type FsmActionUpdateOneRequiredWithoutTransitionsNestedInput = {
  create?: Prisma.XOR<Prisma.FsmActionCreateWithoutTransitionsInput, Prisma.FsmActionUncheckedCreateWithoutTransitionsInput>
  connectOrCreate?: Prisma.FsmActionCreateOrConnectWithoutTransitionsInput
  upsert?: Prisma.FsmActionUpsertWithoutTransitionsInput
  connect?: Prisma.FsmActionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FsmActionUpdateToOneWithWhereWithoutTransitionsInput, Prisma.FsmActionUpdateWithoutTransitionsInput>, Prisma.FsmActionUncheckedUpdateWithoutTransitionsInput>
}

export type FsmActionCreateWithoutTransitionsInput = {
  name: string
  label?: string | null
}

export type FsmActionUncheckedCreateWithoutTransitionsInput = {
  id?: number
  name: string
  label?: string | null
}

export type FsmActionCreateOrConnectWithoutTransitionsInput = {
  where: Prisma.FsmActionWhereUniqueInput
  create: Prisma.XOR<Prisma.FsmActionCreateWithoutTransitionsInput, Prisma.FsmActionUncheckedCreateWithoutTransitionsInput>
}

export type FsmActionUpsertWithoutTransitionsInput = {
  update: Prisma.XOR<Prisma.FsmActionUpdateWithoutTransitionsInput, Prisma.FsmActionUncheckedUpdateWithoutTransitionsInput>
  create: Prisma.XOR<Prisma.FsmActionCreateWithoutTransitionsInput, Prisma.FsmActionUncheckedCreateWithoutTransitionsInput>
  where?: Prisma.FsmActionWhereInput
}

export type FsmActionUpdateToOneWithWhereWithoutTransitionsInput = {
  where?: Prisma.FsmActionWhereInput
  data: Prisma.XOR<Prisma.FsmActionUpdateWithoutTransitionsInput, Prisma.FsmActionUncheckedUpdateWithoutTransitionsInput>
}

export type FsmActionUpdateWithoutTransitionsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FsmActionUncheckedUpdateWithoutTransitionsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type FsmActionCountOutputType
 */

export type FsmActionCountOutputType = {
  transitions: number
}

export type FsmActionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transitions?: boolean | FsmActionCountOutputTypeCountTransitionsArgs
}

/**
 * FsmActionCountOutputType without action
 */
export type FsmActionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmActionCountOutputType
   */
  select?: Prisma.FsmActionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FsmActionCountOutputType without action
 */
export type FsmActionCountOutputTypeCountTransitionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FsmTransitionWhereInput
}


export type FsmActionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  label?: boolean
  transitions?: boolean | Prisma.FsmAction$transitionsArgs<ExtArgs>
  _count?: boolean | Prisma.FsmActionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fsmAction"]>



export type FsmActionSelectScalar = {
  id?: boolean
  name?: boolean
  label?: boolean
}

export type FsmActionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "label", ExtArgs["result"]["fsmAction"]>
export type FsmActionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transitions?: boolean | Prisma.FsmAction$transitionsArgs<ExtArgs>
  _count?: boolean | Prisma.FsmActionCountOutputTypeDefaultArgs<ExtArgs>
}

export type $FsmActionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FsmAction"
  objects: {
    transitions: Prisma.$FsmTransitionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    label: string | null
  }, ExtArgs["result"]["fsmAction"]>
  composites: {}
}

export type FsmActionGetPayload<S extends boolean | null | undefined | FsmActionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FsmActionPayload, S>

export type FsmActionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FsmActionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FsmActionCountAggregateInputType | true
  }

export interface FsmActionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FsmAction'], meta: { name: 'FsmAction' } }
  /**
   * Find zero or one FsmAction that matches the filter.
   * @param {FsmActionFindUniqueArgs} args - Arguments to find a FsmAction
   * @example
   * // Get one FsmAction
   * const fsmAction = await prisma.fsmAction.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FsmActionFindUniqueArgs>(args: Prisma.SelectSubset<T, FsmActionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FsmActionClient<runtime.Types.Result.GetResult<Prisma.$FsmActionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FsmAction that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FsmActionFindUniqueOrThrowArgs} args - Arguments to find a FsmAction
   * @example
   * // Get one FsmAction
   * const fsmAction = await prisma.fsmAction.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FsmActionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FsmActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FsmActionClient<runtime.Types.Result.GetResult<Prisma.$FsmActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FsmAction that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmActionFindFirstArgs} args - Arguments to find a FsmAction
   * @example
   * // Get one FsmAction
   * const fsmAction = await prisma.fsmAction.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FsmActionFindFirstArgs>(args?: Prisma.SelectSubset<T, FsmActionFindFirstArgs<ExtArgs>>): Prisma.Prisma__FsmActionClient<runtime.Types.Result.GetResult<Prisma.$FsmActionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FsmAction that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmActionFindFirstOrThrowArgs} args - Arguments to find a FsmAction
   * @example
   * // Get one FsmAction
   * const fsmAction = await prisma.fsmAction.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FsmActionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FsmActionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FsmActionClient<runtime.Types.Result.GetResult<Prisma.$FsmActionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FsmActions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmActionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FsmActions
   * const fsmActions = await prisma.fsmAction.findMany()
   * 
   * // Get first 10 FsmActions
   * const fsmActions = await prisma.fsmAction.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const fsmActionWithIdOnly = await prisma.fsmAction.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FsmActionFindManyArgs>(args?: Prisma.SelectSubset<T, FsmActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FsmActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FsmAction.
   * @param {FsmActionCreateArgs} args - Arguments to create a FsmAction.
   * @example
   * // Create one FsmAction
   * const FsmAction = await prisma.fsmAction.create({
   *   data: {
   *     // ... data to create a FsmAction
   *   }
   * })
   * 
   */
  create<T extends FsmActionCreateArgs>(args: Prisma.SelectSubset<T, FsmActionCreateArgs<ExtArgs>>): Prisma.Prisma__FsmActionClient<runtime.Types.Result.GetResult<Prisma.$FsmActionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FsmActions.
   * @param {FsmActionCreateManyArgs} args - Arguments to create many FsmActions.
   * @example
   * // Create many FsmActions
   * const fsmAction = await prisma.fsmAction.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FsmActionCreateManyArgs>(args?: Prisma.SelectSubset<T, FsmActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a FsmAction.
   * @param {FsmActionDeleteArgs} args - Arguments to delete one FsmAction.
   * @example
   * // Delete one FsmAction
   * const FsmAction = await prisma.fsmAction.delete({
   *   where: {
   *     // ... filter to delete one FsmAction
   *   }
   * })
   * 
   */
  delete<T extends FsmActionDeleteArgs>(args: Prisma.SelectSubset<T, FsmActionDeleteArgs<ExtArgs>>): Prisma.Prisma__FsmActionClient<runtime.Types.Result.GetResult<Prisma.$FsmActionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FsmAction.
   * @param {FsmActionUpdateArgs} args - Arguments to update one FsmAction.
   * @example
   * // Update one FsmAction
   * const fsmAction = await prisma.fsmAction.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FsmActionUpdateArgs>(args: Prisma.SelectSubset<T, FsmActionUpdateArgs<ExtArgs>>): Prisma.Prisma__FsmActionClient<runtime.Types.Result.GetResult<Prisma.$FsmActionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FsmActions.
   * @param {FsmActionDeleteManyArgs} args - Arguments to filter FsmActions to delete.
   * @example
   * // Delete a few FsmActions
   * const { count } = await prisma.fsmAction.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FsmActionDeleteManyArgs>(args?: Prisma.SelectSubset<T, FsmActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FsmActions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmActionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FsmActions
   * const fsmAction = await prisma.fsmAction.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FsmActionUpdateManyArgs>(args: Prisma.SelectSubset<T, FsmActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one FsmAction.
   * @param {FsmActionUpsertArgs} args - Arguments to update or create a FsmAction.
   * @example
   * // Update or create a FsmAction
   * const fsmAction = await prisma.fsmAction.upsert({
   *   create: {
   *     // ... data to create a FsmAction
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FsmAction we want to update
   *   }
   * })
   */
  upsert<T extends FsmActionUpsertArgs>(args: Prisma.SelectSubset<T, FsmActionUpsertArgs<ExtArgs>>): Prisma.Prisma__FsmActionClient<runtime.Types.Result.GetResult<Prisma.$FsmActionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FsmActions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmActionCountArgs} args - Arguments to filter FsmActions to count.
   * @example
   * // Count the number of FsmActions
   * const count = await prisma.fsmAction.count({
   *   where: {
   *     // ... the filter for the FsmActions we want to count
   *   }
   * })
  **/
  count<T extends FsmActionCountArgs>(
    args?: Prisma.Subset<T, FsmActionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FsmActionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FsmAction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FsmActionAggregateArgs>(args: Prisma.Subset<T, FsmActionAggregateArgs>): Prisma.PrismaPromise<GetFsmActionAggregateType<T>>

  /**
   * Group by FsmAction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmActionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FsmActionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FsmActionGroupByArgs['orderBy'] }
      : { orderBy?: FsmActionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FsmActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFsmActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FsmAction model
 */
readonly fields: FsmActionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FsmAction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FsmActionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  transitions<T extends Prisma.FsmAction$transitionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FsmAction$transitionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FsmTransitionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FsmAction model
 */
export interface FsmActionFieldRefs {
  readonly id: Prisma.FieldRef<"FsmAction", 'Int'>
  readonly name: Prisma.FieldRef<"FsmAction", 'String'>
  readonly label: Prisma.FieldRef<"FsmAction", 'String'>
}
    

// Custom InputTypes
/**
 * FsmAction findUnique
 */
export type FsmActionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmAction
   */
  select?: Prisma.FsmActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmAction
   */
  omit?: Prisma.FsmActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmActionInclude<ExtArgs> | null
  /**
   * Filter, which FsmAction to fetch.
   */
  where: Prisma.FsmActionWhereUniqueInput
}

/**
 * FsmAction findUniqueOrThrow
 */
export type FsmActionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmAction
   */
  select?: Prisma.FsmActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmAction
   */
  omit?: Prisma.FsmActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmActionInclude<ExtArgs> | null
  /**
   * Filter, which FsmAction to fetch.
   */
  where: Prisma.FsmActionWhereUniqueInput
}

/**
 * FsmAction findFirst
 */
export type FsmActionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmAction
   */
  select?: Prisma.FsmActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmAction
   */
  omit?: Prisma.FsmActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmActionInclude<ExtArgs> | null
  /**
   * Filter, which FsmAction to fetch.
   */
  where?: Prisma.FsmActionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmActions to fetch.
   */
  orderBy?: Prisma.FsmActionOrderByWithRelationInput | Prisma.FsmActionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FsmActions.
   */
  cursor?: Prisma.FsmActionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmActions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmActions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FsmActions.
   */
  distinct?: Prisma.FsmActionScalarFieldEnum | Prisma.FsmActionScalarFieldEnum[]
}

/**
 * FsmAction findFirstOrThrow
 */
export type FsmActionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmAction
   */
  select?: Prisma.FsmActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmAction
   */
  omit?: Prisma.FsmActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmActionInclude<ExtArgs> | null
  /**
   * Filter, which FsmAction to fetch.
   */
  where?: Prisma.FsmActionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmActions to fetch.
   */
  orderBy?: Prisma.FsmActionOrderByWithRelationInput | Prisma.FsmActionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FsmActions.
   */
  cursor?: Prisma.FsmActionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmActions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmActions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FsmActions.
   */
  distinct?: Prisma.FsmActionScalarFieldEnum | Prisma.FsmActionScalarFieldEnum[]
}

/**
 * FsmAction findMany
 */
export type FsmActionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmAction
   */
  select?: Prisma.FsmActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmAction
   */
  omit?: Prisma.FsmActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmActionInclude<ExtArgs> | null
  /**
   * Filter, which FsmActions to fetch.
   */
  where?: Prisma.FsmActionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmActions to fetch.
   */
  orderBy?: Prisma.FsmActionOrderByWithRelationInput | Prisma.FsmActionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FsmActions.
   */
  cursor?: Prisma.FsmActionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmActions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmActions.
   */
  skip?: number
  distinct?: Prisma.FsmActionScalarFieldEnum | Prisma.FsmActionScalarFieldEnum[]
}

/**
 * FsmAction create
 */
export type FsmActionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmAction
   */
  select?: Prisma.FsmActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmAction
   */
  omit?: Prisma.FsmActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmActionInclude<ExtArgs> | null
  /**
   * The data needed to create a FsmAction.
   */
  data: Prisma.XOR<Prisma.FsmActionCreateInput, Prisma.FsmActionUncheckedCreateInput>
}

/**
 * FsmAction createMany
 */
export type FsmActionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FsmActions.
   */
  data: Prisma.FsmActionCreateManyInput | Prisma.FsmActionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FsmAction update
 */
export type FsmActionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmAction
   */
  select?: Prisma.FsmActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmAction
   */
  omit?: Prisma.FsmActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmActionInclude<ExtArgs> | null
  /**
   * The data needed to update a FsmAction.
   */
  data: Prisma.XOR<Prisma.FsmActionUpdateInput, Prisma.FsmActionUncheckedUpdateInput>
  /**
   * Choose, which FsmAction to update.
   */
  where: Prisma.FsmActionWhereUniqueInput
}

/**
 * FsmAction updateMany
 */
export type FsmActionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FsmActions.
   */
  data: Prisma.XOR<Prisma.FsmActionUpdateManyMutationInput, Prisma.FsmActionUncheckedUpdateManyInput>
  /**
   * Filter which FsmActions to update
   */
  where?: Prisma.FsmActionWhereInput
  /**
   * Limit how many FsmActions to update.
   */
  limit?: number
}

/**
 * FsmAction upsert
 */
export type FsmActionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmAction
   */
  select?: Prisma.FsmActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmAction
   */
  omit?: Prisma.FsmActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmActionInclude<ExtArgs> | null
  /**
   * The filter to search for the FsmAction to update in case it exists.
   */
  where: Prisma.FsmActionWhereUniqueInput
  /**
   * In case the FsmAction found by the `where` argument doesn't exist, create a new FsmAction with this data.
   */
  create: Prisma.XOR<Prisma.FsmActionCreateInput, Prisma.FsmActionUncheckedCreateInput>
  /**
   * In case the FsmAction was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FsmActionUpdateInput, Prisma.FsmActionUncheckedUpdateInput>
}

/**
 * FsmAction delete
 */
export type FsmActionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmAction
   */
  select?: Prisma.FsmActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmAction
   */
  omit?: Prisma.FsmActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmActionInclude<ExtArgs> | null
  /**
   * Filter which FsmAction to delete.
   */
  where: Prisma.FsmActionWhereUniqueInput
}

/**
 * FsmAction deleteMany
 */
export type FsmActionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FsmActions to delete
   */
  where?: Prisma.FsmActionWhereInput
  /**
   * Limit how many FsmActions to delete.
   */
  limit?: number
}

/**
 * FsmAction.transitions
 */
export type FsmAction$transitionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmTransition
   */
  select?: Prisma.FsmTransitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmTransition
   */
  omit?: Prisma.FsmTransitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmTransitionInclude<ExtArgs> | null
  where?: Prisma.FsmTransitionWhereInput
  orderBy?: Prisma.FsmTransitionOrderByWithRelationInput | Prisma.FsmTransitionOrderByWithRelationInput[]
  cursor?: Prisma.FsmTransitionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FsmTransitionScalarFieldEnum | Prisma.FsmTransitionScalarFieldEnum[]
}

/**
 * FsmAction without action
 */
export type FsmActionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmAction
   */
  select?: Prisma.FsmActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmAction
   */
  omit?: Prisma.FsmActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmActionInclude<ExtArgs> | null
}
