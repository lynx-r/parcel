
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `FsmState` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model FsmState
 * 
 */
export type FsmStateModel = runtime.Types.Result.DefaultSelection<Prisma.$FsmStatePayload>

export type AggregateFsmState = {
  _count: FsmStateCountAggregateOutputType | null
  _avg: FsmStateAvgAggregateOutputType | null
  _sum: FsmStateSumAggregateOutputType | null
  _min: FsmStateMinAggregateOutputType | null
  _max: FsmStateMaxAggregateOutputType | null
}

export type FsmStateAvgAggregateOutputType = {
  id: number | null
}

export type FsmStateSumAggregateOutputType = {
  id: number | null
}

export type FsmStateMinAggregateOutputType = {
  id: number | null
  name: string | null
  label: string | null
}

export type FsmStateMaxAggregateOutputType = {
  id: number | null
  name: string | null
  label: string | null
}

export type FsmStateCountAggregateOutputType = {
  id: number
  name: number
  label: number
  _all: number
}


export type FsmStateAvgAggregateInputType = {
  id?: true
}

export type FsmStateSumAggregateInputType = {
  id?: true
}

export type FsmStateMinAggregateInputType = {
  id?: true
  name?: true
  label?: true
}

export type FsmStateMaxAggregateInputType = {
  id?: true
  name?: true
  label?: true
}

export type FsmStateCountAggregateInputType = {
  id?: true
  name?: true
  label?: true
  _all?: true
}

export type FsmStateAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FsmState to aggregate.
   */
  where?: Prisma.FsmStateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmStates to fetch.
   */
  orderBy?: Prisma.FsmStateOrderByWithRelationInput | Prisma.FsmStateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FsmStateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmStates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmStates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FsmStates
  **/
  _count?: true | FsmStateCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FsmStateAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FsmStateSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FsmStateMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FsmStateMaxAggregateInputType
}

export type GetFsmStateAggregateType<T extends FsmStateAggregateArgs> = {
      [P in keyof T & keyof AggregateFsmState]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFsmState[P]>
    : Prisma.GetScalarType<T[P], AggregateFsmState[P]>
}




export type FsmStateGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FsmStateWhereInput
  orderBy?: Prisma.FsmStateOrderByWithAggregationInput | Prisma.FsmStateOrderByWithAggregationInput[]
  by: Prisma.FsmStateScalarFieldEnum[] | Prisma.FsmStateScalarFieldEnum
  having?: Prisma.FsmStateScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FsmStateCountAggregateInputType | true
  _avg?: FsmStateAvgAggregateInputType
  _sum?: FsmStateSumAggregateInputType
  _min?: FsmStateMinAggregateInputType
  _max?: FsmStateMaxAggregateInputType
}

export type FsmStateGroupByOutputType = {
  id: number
  name: string
  label: string | null
  _count: FsmStateCountAggregateOutputType | null
  _avg: FsmStateAvgAggregateOutputType | null
  _sum: FsmStateSumAggregateOutputType | null
  _min: FsmStateMinAggregateOutputType | null
  _max: FsmStateMaxAggregateOutputType | null
}

type GetFsmStateGroupByPayload<T extends FsmStateGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FsmStateGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FsmStateGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FsmStateGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FsmStateGroupByOutputType[P]>
      }
    >
  >



export type FsmStateWhereInput = {
  AND?: Prisma.FsmStateWhereInput | Prisma.FsmStateWhereInput[]
  OR?: Prisma.FsmStateWhereInput[]
  NOT?: Prisma.FsmStateWhereInput | Prisma.FsmStateWhereInput[]
  id?: Prisma.IntFilter<"FsmState"> | number
  name?: Prisma.StringFilter<"FsmState"> | string
  label?: Prisma.StringNullableFilter<"FsmState"> | string | null
  transitions_from?: Prisma.FsmTransitionListRelationFilter
  transitions_to?: Prisma.FsmTransitionListRelationFilter
}

export type FsmStateOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrderInput | Prisma.SortOrder
  transitions_from?: Prisma.FsmTransitionOrderByRelationAggregateInput
  transitions_to?: Prisma.FsmTransitionOrderByRelationAggregateInput
  _relevance?: Prisma.FsmStateOrderByRelevanceInput
}

export type FsmStateWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.FsmStateWhereInput | Prisma.FsmStateWhereInput[]
  OR?: Prisma.FsmStateWhereInput[]
  NOT?: Prisma.FsmStateWhereInput | Prisma.FsmStateWhereInput[]
  label?: Prisma.StringNullableFilter<"FsmState"> | string | null
  transitions_from?: Prisma.FsmTransitionListRelationFilter
  transitions_to?: Prisma.FsmTransitionListRelationFilter
}, "id" | "name">

export type FsmStateOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.FsmStateCountOrderByAggregateInput
  _avg?: Prisma.FsmStateAvgOrderByAggregateInput
  _max?: Prisma.FsmStateMaxOrderByAggregateInput
  _min?: Prisma.FsmStateMinOrderByAggregateInput
  _sum?: Prisma.FsmStateSumOrderByAggregateInput
}

export type FsmStateScalarWhereWithAggregatesInput = {
  AND?: Prisma.FsmStateScalarWhereWithAggregatesInput | Prisma.FsmStateScalarWhereWithAggregatesInput[]
  OR?: Prisma.FsmStateScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FsmStateScalarWhereWithAggregatesInput | Prisma.FsmStateScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"FsmState"> | number
  name?: Prisma.StringWithAggregatesFilter<"FsmState"> | string
  label?: Prisma.StringNullableWithAggregatesFilter<"FsmState"> | string | null
}

export type FsmStateCreateInput = {
  name: string
  label?: string | null
  transitions_from?: Prisma.FsmTransitionCreateNestedManyWithoutFrom_stateInput
  transitions_to?: Prisma.FsmTransitionCreateNestedManyWithoutTo_stateInput
}

export type FsmStateUncheckedCreateInput = {
  id?: number
  name: string
  label?: string | null
  transitions_from?: Prisma.FsmTransitionUncheckedCreateNestedManyWithoutFrom_stateInput
  transitions_to?: Prisma.FsmTransitionUncheckedCreateNestedManyWithoutTo_stateInput
}

export type FsmStateUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transitions_from?: Prisma.FsmTransitionUpdateManyWithoutFrom_stateNestedInput
  transitions_to?: Prisma.FsmTransitionUpdateManyWithoutTo_stateNestedInput
}

export type FsmStateUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transitions_from?: Prisma.FsmTransitionUncheckedUpdateManyWithoutFrom_stateNestedInput
  transitions_to?: Prisma.FsmTransitionUncheckedUpdateManyWithoutTo_stateNestedInput
}

export type FsmStateCreateManyInput = {
  id?: number
  name: string
  label?: string | null
}

export type FsmStateUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FsmStateUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FsmStateOrderByRelevanceInput = {
  fields: Prisma.FsmStateOrderByRelevanceFieldEnum | Prisma.FsmStateOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type FsmStateCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrder
}

export type FsmStateAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type FsmStateMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrder
}

export type FsmStateMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrder
}

export type FsmStateSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type FsmStateScalarRelationFilter = {
  is?: Prisma.FsmStateWhereInput
  isNot?: Prisma.FsmStateWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type FsmStateCreateNestedOneWithoutTransitions_fromInput = {
  create?: Prisma.XOR<Prisma.FsmStateCreateWithoutTransitions_fromInput, Prisma.FsmStateUncheckedCreateWithoutTransitions_fromInput>
  connectOrCreate?: Prisma.FsmStateCreateOrConnectWithoutTransitions_fromInput
  connect?: Prisma.FsmStateWhereUniqueInput
}

export type FsmStateCreateNestedOneWithoutTransitions_toInput = {
  create?: Prisma.XOR<Prisma.FsmStateCreateWithoutTransitions_toInput, Prisma.FsmStateUncheckedCreateWithoutTransitions_toInput>
  connectOrCreate?: Prisma.FsmStateCreateOrConnectWithoutTransitions_toInput
  connect?: Prisma.FsmStateWhereUniqueInput
}

export type FsmStateUpdateOneRequiredWithoutTransitions_fromNestedInput = {
  create?: Prisma.XOR<Prisma.FsmStateCreateWithoutTransitions_fromInput, Prisma.FsmStateUncheckedCreateWithoutTransitions_fromInput>
  connectOrCreate?: Prisma.FsmStateCreateOrConnectWithoutTransitions_fromInput
  upsert?: Prisma.FsmStateUpsertWithoutTransitions_fromInput
  connect?: Prisma.FsmStateWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FsmStateUpdateToOneWithWhereWithoutTransitions_fromInput, Prisma.FsmStateUpdateWithoutTransitions_fromInput>, Prisma.FsmStateUncheckedUpdateWithoutTransitions_fromInput>
}

export type FsmStateUpdateOneRequiredWithoutTransitions_toNestedInput = {
  create?: Prisma.XOR<Prisma.FsmStateCreateWithoutTransitions_toInput, Prisma.FsmStateUncheckedCreateWithoutTransitions_toInput>
  connectOrCreate?: Prisma.FsmStateCreateOrConnectWithoutTransitions_toInput
  upsert?: Prisma.FsmStateUpsertWithoutTransitions_toInput
  connect?: Prisma.FsmStateWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FsmStateUpdateToOneWithWhereWithoutTransitions_toInput, Prisma.FsmStateUpdateWithoutTransitions_toInput>, Prisma.FsmStateUncheckedUpdateWithoutTransitions_toInput>
}

export type FsmStateCreateWithoutTransitions_fromInput = {
  name: string
  label?: string | null
  transitions_to?: Prisma.FsmTransitionCreateNestedManyWithoutTo_stateInput
}

export type FsmStateUncheckedCreateWithoutTransitions_fromInput = {
  id?: number
  name: string
  label?: string | null
  transitions_to?: Prisma.FsmTransitionUncheckedCreateNestedManyWithoutTo_stateInput
}

export type FsmStateCreateOrConnectWithoutTransitions_fromInput = {
  where: Prisma.FsmStateWhereUniqueInput
  create: Prisma.XOR<Prisma.FsmStateCreateWithoutTransitions_fromInput, Prisma.FsmStateUncheckedCreateWithoutTransitions_fromInput>
}

export type FsmStateCreateWithoutTransitions_toInput = {
  name: string
  label?: string | null
  transitions_from?: Prisma.FsmTransitionCreateNestedManyWithoutFrom_stateInput
}

export type FsmStateUncheckedCreateWithoutTransitions_toInput = {
  id?: number
  name: string
  label?: string | null
  transitions_from?: Prisma.FsmTransitionUncheckedCreateNestedManyWithoutFrom_stateInput
}

export type FsmStateCreateOrConnectWithoutTransitions_toInput = {
  where: Prisma.FsmStateWhereUniqueInput
  create: Prisma.XOR<Prisma.FsmStateCreateWithoutTransitions_toInput, Prisma.FsmStateUncheckedCreateWithoutTransitions_toInput>
}

export type FsmStateUpsertWithoutTransitions_fromInput = {
  update: Prisma.XOR<Prisma.FsmStateUpdateWithoutTransitions_fromInput, Prisma.FsmStateUncheckedUpdateWithoutTransitions_fromInput>
  create: Prisma.XOR<Prisma.FsmStateCreateWithoutTransitions_fromInput, Prisma.FsmStateUncheckedCreateWithoutTransitions_fromInput>
  where?: Prisma.FsmStateWhereInput
}

export type FsmStateUpdateToOneWithWhereWithoutTransitions_fromInput = {
  where?: Prisma.FsmStateWhereInput
  data: Prisma.XOR<Prisma.FsmStateUpdateWithoutTransitions_fromInput, Prisma.FsmStateUncheckedUpdateWithoutTransitions_fromInput>
}

export type FsmStateUpdateWithoutTransitions_fromInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transitions_to?: Prisma.FsmTransitionUpdateManyWithoutTo_stateNestedInput
}

export type FsmStateUncheckedUpdateWithoutTransitions_fromInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transitions_to?: Prisma.FsmTransitionUncheckedUpdateManyWithoutTo_stateNestedInput
}

export type FsmStateUpsertWithoutTransitions_toInput = {
  update: Prisma.XOR<Prisma.FsmStateUpdateWithoutTransitions_toInput, Prisma.FsmStateUncheckedUpdateWithoutTransitions_toInput>
  create: Prisma.XOR<Prisma.FsmStateCreateWithoutTransitions_toInput, Prisma.FsmStateUncheckedCreateWithoutTransitions_toInput>
  where?: Prisma.FsmStateWhereInput
}

export type FsmStateUpdateToOneWithWhereWithoutTransitions_toInput = {
  where?: Prisma.FsmStateWhereInput
  data: Prisma.XOR<Prisma.FsmStateUpdateWithoutTransitions_toInput, Prisma.FsmStateUncheckedUpdateWithoutTransitions_toInput>
}

export type FsmStateUpdateWithoutTransitions_toInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transitions_from?: Prisma.FsmTransitionUpdateManyWithoutFrom_stateNestedInput
}

export type FsmStateUncheckedUpdateWithoutTransitions_toInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transitions_from?: Prisma.FsmTransitionUncheckedUpdateManyWithoutFrom_stateNestedInput
}


/**
 * Count Type FsmStateCountOutputType
 */

export type FsmStateCountOutputType = {
  transitions_from: number
  transitions_to: number
}

export type FsmStateCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transitions_from?: boolean | FsmStateCountOutputTypeCountTransitions_fromArgs
  transitions_to?: boolean | FsmStateCountOutputTypeCountTransitions_toArgs
}

/**
 * FsmStateCountOutputType without action
 */
export type FsmStateCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmStateCountOutputType
   */
  select?: Prisma.FsmStateCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FsmStateCountOutputType without action
 */
export type FsmStateCountOutputTypeCountTransitions_fromArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FsmTransitionWhereInput
}

/**
 * FsmStateCountOutputType without action
 */
export type FsmStateCountOutputTypeCountTransitions_toArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FsmTransitionWhereInput
}


export type FsmStateSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  label?: boolean
  transitions_from?: boolean | Prisma.FsmState$transitions_fromArgs<ExtArgs>
  transitions_to?: boolean | Prisma.FsmState$transitions_toArgs<ExtArgs>
  _count?: boolean | Prisma.FsmStateCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fsmState"]>



export type FsmStateSelectScalar = {
  id?: boolean
  name?: boolean
  label?: boolean
}

export type FsmStateOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "label", ExtArgs["result"]["fsmState"]>
export type FsmStateInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transitions_from?: boolean | Prisma.FsmState$transitions_fromArgs<ExtArgs>
  transitions_to?: boolean | Prisma.FsmState$transitions_toArgs<ExtArgs>
  _count?: boolean | Prisma.FsmStateCountOutputTypeDefaultArgs<ExtArgs>
}

export type $FsmStatePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FsmState"
  objects: {
    transitions_from: Prisma.$FsmTransitionPayload<ExtArgs>[]
    transitions_to: Prisma.$FsmTransitionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    label: string | null
  }, ExtArgs["result"]["fsmState"]>
  composites: {}
}

export type FsmStateGetPayload<S extends boolean | null | undefined | FsmStateDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FsmStatePayload, S>

export type FsmStateCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FsmStateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FsmStateCountAggregateInputType | true
  }

export interface FsmStateDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FsmState'], meta: { name: 'FsmState' } }
  /**
   * Find zero or one FsmState that matches the filter.
   * @param {FsmStateFindUniqueArgs} args - Arguments to find a FsmState
   * @example
   * // Get one FsmState
   * const fsmState = await prisma.fsmState.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FsmStateFindUniqueArgs>(args: Prisma.SelectSubset<T, FsmStateFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FsmStateClient<runtime.Types.Result.GetResult<Prisma.$FsmStatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FsmState that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FsmStateFindUniqueOrThrowArgs} args - Arguments to find a FsmState
   * @example
   * // Get one FsmState
   * const fsmState = await prisma.fsmState.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FsmStateFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FsmStateFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FsmStateClient<runtime.Types.Result.GetResult<Prisma.$FsmStatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FsmState that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmStateFindFirstArgs} args - Arguments to find a FsmState
   * @example
   * // Get one FsmState
   * const fsmState = await prisma.fsmState.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FsmStateFindFirstArgs>(args?: Prisma.SelectSubset<T, FsmStateFindFirstArgs<ExtArgs>>): Prisma.Prisma__FsmStateClient<runtime.Types.Result.GetResult<Prisma.$FsmStatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FsmState that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmStateFindFirstOrThrowArgs} args - Arguments to find a FsmState
   * @example
   * // Get one FsmState
   * const fsmState = await prisma.fsmState.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FsmStateFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FsmStateFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FsmStateClient<runtime.Types.Result.GetResult<Prisma.$FsmStatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FsmStates that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmStateFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FsmStates
   * const fsmStates = await prisma.fsmState.findMany()
   * 
   * // Get first 10 FsmStates
   * const fsmStates = await prisma.fsmState.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const fsmStateWithIdOnly = await prisma.fsmState.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FsmStateFindManyArgs>(args?: Prisma.SelectSubset<T, FsmStateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FsmStatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FsmState.
   * @param {FsmStateCreateArgs} args - Arguments to create a FsmState.
   * @example
   * // Create one FsmState
   * const FsmState = await prisma.fsmState.create({
   *   data: {
   *     // ... data to create a FsmState
   *   }
   * })
   * 
   */
  create<T extends FsmStateCreateArgs>(args: Prisma.SelectSubset<T, FsmStateCreateArgs<ExtArgs>>): Prisma.Prisma__FsmStateClient<runtime.Types.Result.GetResult<Prisma.$FsmStatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FsmStates.
   * @param {FsmStateCreateManyArgs} args - Arguments to create many FsmStates.
   * @example
   * // Create many FsmStates
   * const fsmState = await prisma.fsmState.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FsmStateCreateManyArgs>(args?: Prisma.SelectSubset<T, FsmStateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a FsmState.
   * @param {FsmStateDeleteArgs} args - Arguments to delete one FsmState.
   * @example
   * // Delete one FsmState
   * const FsmState = await prisma.fsmState.delete({
   *   where: {
   *     // ... filter to delete one FsmState
   *   }
   * })
   * 
   */
  delete<T extends FsmStateDeleteArgs>(args: Prisma.SelectSubset<T, FsmStateDeleteArgs<ExtArgs>>): Prisma.Prisma__FsmStateClient<runtime.Types.Result.GetResult<Prisma.$FsmStatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FsmState.
   * @param {FsmStateUpdateArgs} args - Arguments to update one FsmState.
   * @example
   * // Update one FsmState
   * const fsmState = await prisma.fsmState.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FsmStateUpdateArgs>(args: Prisma.SelectSubset<T, FsmStateUpdateArgs<ExtArgs>>): Prisma.Prisma__FsmStateClient<runtime.Types.Result.GetResult<Prisma.$FsmStatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FsmStates.
   * @param {FsmStateDeleteManyArgs} args - Arguments to filter FsmStates to delete.
   * @example
   * // Delete a few FsmStates
   * const { count } = await prisma.fsmState.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FsmStateDeleteManyArgs>(args?: Prisma.SelectSubset<T, FsmStateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FsmStates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmStateUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FsmStates
   * const fsmState = await prisma.fsmState.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FsmStateUpdateManyArgs>(args: Prisma.SelectSubset<T, FsmStateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one FsmState.
   * @param {FsmStateUpsertArgs} args - Arguments to update or create a FsmState.
   * @example
   * // Update or create a FsmState
   * const fsmState = await prisma.fsmState.upsert({
   *   create: {
   *     // ... data to create a FsmState
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FsmState we want to update
   *   }
   * })
   */
  upsert<T extends FsmStateUpsertArgs>(args: Prisma.SelectSubset<T, FsmStateUpsertArgs<ExtArgs>>): Prisma.Prisma__FsmStateClient<runtime.Types.Result.GetResult<Prisma.$FsmStatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FsmStates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmStateCountArgs} args - Arguments to filter FsmStates to count.
   * @example
   * // Count the number of FsmStates
   * const count = await prisma.fsmState.count({
   *   where: {
   *     // ... the filter for the FsmStates we want to count
   *   }
   * })
  **/
  count<T extends FsmStateCountArgs>(
    args?: Prisma.Subset<T, FsmStateCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FsmStateCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FsmState.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmStateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FsmStateAggregateArgs>(args: Prisma.Subset<T, FsmStateAggregateArgs>): Prisma.PrismaPromise<GetFsmStateAggregateType<T>>

  /**
   * Group by FsmState.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmStateGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FsmStateGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FsmStateGroupByArgs['orderBy'] }
      : { orderBy?: FsmStateGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FsmStateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFsmStateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FsmState model
 */
readonly fields: FsmStateFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FsmState.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FsmStateClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  transitions_from<T extends Prisma.FsmState$transitions_fromArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FsmState$transitions_fromArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FsmTransitionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  transitions_to<T extends Prisma.FsmState$transitions_toArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FsmState$transitions_toArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FsmTransitionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FsmState model
 */
export interface FsmStateFieldRefs {
  readonly id: Prisma.FieldRef<"FsmState", 'Int'>
  readonly name: Prisma.FieldRef<"FsmState", 'String'>
  readonly label: Prisma.FieldRef<"FsmState", 'String'>
}
    

// Custom InputTypes
/**
 * FsmState findUnique
 */
export type FsmStateFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmState
   */
  select?: Prisma.FsmStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmState
   */
  omit?: Prisma.FsmStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmStateInclude<ExtArgs> | null
  /**
   * Filter, which FsmState to fetch.
   */
  where: Prisma.FsmStateWhereUniqueInput
}

/**
 * FsmState findUniqueOrThrow
 */
export type FsmStateFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmState
   */
  select?: Prisma.FsmStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmState
   */
  omit?: Prisma.FsmStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmStateInclude<ExtArgs> | null
  /**
   * Filter, which FsmState to fetch.
   */
  where: Prisma.FsmStateWhereUniqueInput
}

/**
 * FsmState findFirst
 */
export type FsmStateFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmState
   */
  select?: Prisma.FsmStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmState
   */
  omit?: Prisma.FsmStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmStateInclude<ExtArgs> | null
  /**
   * Filter, which FsmState to fetch.
   */
  where?: Prisma.FsmStateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmStates to fetch.
   */
  orderBy?: Prisma.FsmStateOrderByWithRelationInput | Prisma.FsmStateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FsmStates.
   */
  cursor?: Prisma.FsmStateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmStates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmStates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FsmStates.
   */
  distinct?: Prisma.FsmStateScalarFieldEnum | Prisma.FsmStateScalarFieldEnum[]
}

/**
 * FsmState findFirstOrThrow
 */
export type FsmStateFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmState
   */
  select?: Prisma.FsmStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmState
   */
  omit?: Prisma.FsmStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmStateInclude<ExtArgs> | null
  /**
   * Filter, which FsmState to fetch.
   */
  where?: Prisma.FsmStateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmStates to fetch.
   */
  orderBy?: Prisma.FsmStateOrderByWithRelationInput | Prisma.FsmStateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FsmStates.
   */
  cursor?: Prisma.FsmStateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmStates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmStates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FsmStates.
   */
  distinct?: Prisma.FsmStateScalarFieldEnum | Prisma.FsmStateScalarFieldEnum[]
}

/**
 * FsmState findMany
 */
export type FsmStateFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmState
   */
  select?: Prisma.FsmStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmState
   */
  omit?: Prisma.FsmStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmStateInclude<ExtArgs> | null
  /**
   * Filter, which FsmStates to fetch.
   */
  where?: Prisma.FsmStateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmStates to fetch.
   */
  orderBy?: Prisma.FsmStateOrderByWithRelationInput | Prisma.FsmStateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FsmStates.
   */
  cursor?: Prisma.FsmStateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmStates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmStates.
   */
  skip?: number
  distinct?: Prisma.FsmStateScalarFieldEnum | Prisma.FsmStateScalarFieldEnum[]
}

/**
 * FsmState create
 */
export type FsmStateCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmState
   */
  select?: Prisma.FsmStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmState
   */
  omit?: Prisma.FsmStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmStateInclude<ExtArgs> | null
  /**
   * The data needed to create a FsmState.
   */
  data: Prisma.XOR<Prisma.FsmStateCreateInput, Prisma.FsmStateUncheckedCreateInput>
}

/**
 * FsmState createMany
 */
export type FsmStateCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FsmStates.
   */
  data: Prisma.FsmStateCreateManyInput | Prisma.FsmStateCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FsmState update
 */
export type FsmStateUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmState
   */
  select?: Prisma.FsmStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmState
   */
  omit?: Prisma.FsmStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmStateInclude<ExtArgs> | null
  /**
   * The data needed to update a FsmState.
   */
  data: Prisma.XOR<Prisma.FsmStateUpdateInput, Prisma.FsmStateUncheckedUpdateInput>
  /**
   * Choose, which FsmState to update.
   */
  where: Prisma.FsmStateWhereUniqueInput
}

/**
 * FsmState updateMany
 */
export type FsmStateUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FsmStates.
   */
  data: Prisma.XOR<Prisma.FsmStateUpdateManyMutationInput, Prisma.FsmStateUncheckedUpdateManyInput>
  /**
   * Filter which FsmStates to update
   */
  where?: Prisma.FsmStateWhereInput
  /**
   * Limit how many FsmStates to update.
   */
  limit?: number
}

/**
 * FsmState upsert
 */
export type FsmStateUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmState
   */
  select?: Prisma.FsmStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmState
   */
  omit?: Prisma.FsmStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmStateInclude<ExtArgs> | null
  /**
   * The filter to search for the FsmState to update in case it exists.
   */
  where: Prisma.FsmStateWhereUniqueInput
  /**
   * In case the FsmState found by the `where` argument doesn't exist, create a new FsmState with this data.
   */
  create: Prisma.XOR<Prisma.FsmStateCreateInput, Prisma.FsmStateUncheckedCreateInput>
  /**
   * In case the FsmState was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FsmStateUpdateInput, Prisma.FsmStateUncheckedUpdateInput>
}

/**
 * FsmState delete
 */
export type FsmStateDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmState
   */
  select?: Prisma.FsmStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmState
   */
  omit?: Prisma.FsmStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmStateInclude<ExtArgs> | null
  /**
   * Filter which FsmState to delete.
   */
  where: Prisma.FsmStateWhereUniqueInput
}

/**
 * FsmState deleteMany
 */
export type FsmStateDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FsmStates to delete
   */
  where?: Prisma.FsmStateWhereInput
  /**
   * Limit how many FsmStates to delete.
   */
  limit?: number
}

/**
 * FsmState.transitions_from
 */
export type FsmState$transitions_fromArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmTransition
   */
  select?: Prisma.FsmTransitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmTransition
   */
  omit?: Prisma.FsmTransitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmTransitionInclude<ExtArgs> | null
  where?: Prisma.FsmTransitionWhereInput
  orderBy?: Prisma.FsmTransitionOrderByWithRelationInput | Prisma.FsmTransitionOrderByWithRelationInput[]
  cursor?: Prisma.FsmTransitionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FsmTransitionScalarFieldEnum | Prisma.FsmTransitionScalarFieldEnum[]
}

/**
 * FsmState.transitions_to
 */
export type FsmState$transitions_toArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmTransition
   */
  select?: Prisma.FsmTransitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmTransition
   */
  omit?: Prisma.FsmTransitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmTransitionInclude<ExtArgs> | null
  where?: Prisma.FsmTransitionWhereInput
  orderBy?: Prisma.FsmTransitionOrderByWithRelationInput | Prisma.FsmTransitionOrderByWithRelationInput[]
  cursor?: Prisma.FsmTransitionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FsmTransitionScalarFieldEnum | Prisma.FsmTransitionScalarFieldEnum[]
}

/**
 * FsmState without action
 */
export type FsmStateDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmState
   */
  select?: Prisma.FsmStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmState
   */
  omit?: Prisma.FsmStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmStateInclude<ExtArgs> | null
}
