
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `StageOrder` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model StageOrder
 * 
 */
export type StageOrderModel = runtime.Types.Result.DefaultSelection<Prisma.$StageOrderPayload>

export type AggregateStageOrder = {
  _count: StageOrderCountAggregateOutputType | null
  _avg: StageOrderAvgAggregateOutputType | null
  _sum: StageOrderSumAggregateOutputType | null
  _min: StageOrderMinAggregateOutputType | null
  _max: StageOrderMaxAggregateOutputType | null
}

export type StageOrderAvgAggregateOutputType = {
  id: number | null
}

export type StageOrderSumAggregateOutputType = {
  id: number | null
}

export type StageOrderMinAggregateOutputType = {
  id: number | null
  status: string | null
  description: string | null
}

export type StageOrderMaxAggregateOutputType = {
  id: number | null
  status: string | null
  description: string | null
}

export type StageOrderCountAggregateOutputType = {
  id: number
  status: number
  description: number
  _all: number
}


export type StageOrderAvgAggregateInputType = {
  id?: true
}

export type StageOrderSumAggregateInputType = {
  id?: true
}

export type StageOrderMinAggregateInputType = {
  id?: true
  status?: true
  description?: true
}

export type StageOrderMaxAggregateInputType = {
  id?: true
  status?: true
  description?: true
}

export type StageOrderCountAggregateInputType = {
  id?: true
  status?: true
  description?: true
  _all?: true
}

export type StageOrderAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StageOrder to aggregate.
   */
  where?: Prisma.StageOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StageOrders to fetch.
   */
  orderBy?: Prisma.StageOrderOrderByWithRelationInput | Prisma.StageOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StageOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StageOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StageOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StageOrders
  **/
  _count?: true | StageOrderCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: StageOrderAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: StageOrderSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StageOrderMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StageOrderMaxAggregateInputType
}

export type GetStageOrderAggregateType<T extends StageOrderAggregateArgs> = {
      [P in keyof T & keyof AggregateStageOrder]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStageOrder[P]>
    : Prisma.GetScalarType<T[P], AggregateStageOrder[P]>
}




export type StageOrderGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StageOrderWhereInput
  orderBy?: Prisma.StageOrderOrderByWithAggregationInput | Prisma.StageOrderOrderByWithAggregationInput[]
  by: Prisma.StageOrderScalarFieldEnum[] | Prisma.StageOrderScalarFieldEnum
  having?: Prisma.StageOrderScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StageOrderCountAggregateInputType | true
  _avg?: StageOrderAvgAggregateInputType
  _sum?: StageOrderSumAggregateInputType
  _min?: StageOrderMinAggregateInputType
  _max?: StageOrderMaxAggregateInputType
}

export type StageOrderGroupByOutputType = {
  id: number
  status: string
  description: string | null
  _count: StageOrderCountAggregateOutputType | null
  _avg: StageOrderAvgAggregateOutputType | null
  _sum: StageOrderSumAggregateOutputType | null
  _min: StageOrderMinAggregateOutputType | null
  _max: StageOrderMaxAggregateOutputType | null
}

type GetStageOrderGroupByPayload<T extends StageOrderGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StageOrderGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StageOrderGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StageOrderGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StageOrderGroupByOutputType[P]>
      }
    >
  >



export type StageOrderWhereInput = {
  AND?: Prisma.StageOrderWhereInput | Prisma.StageOrderWhereInput[]
  OR?: Prisma.StageOrderWhereInput[]
  NOT?: Prisma.StageOrderWhereInput | Prisma.StageOrderWhereInput[]
  id?: Prisma.IntFilter<"StageOrder"> | number
  status?: Prisma.StringFilter<"StageOrder"> | string
  description?: Prisma.StringNullableFilter<"StageOrder"> | string | null
}

export type StageOrderOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.StageOrderOrderByRelevanceInput
}

export type StageOrderWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.StageOrderWhereInput | Prisma.StageOrderWhereInput[]
  OR?: Prisma.StageOrderWhereInput[]
  NOT?: Prisma.StageOrderWhereInput | Prisma.StageOrderWhereInput[]
  status?: Prisma.StringFilter<"StageOrder"> | string
  description?: Prisma.StringNullableFilter<"StageOrder"> | string | null
}, "id">

export type StageOrderOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.StageOrderCountOrderByAggregateInput
  _avg?: Prisma.StageOrderAvgOrderByAggregateInput
  _max?: Prisma.StageOrderMaxOrderByAggregateInput
  _min?: Prisma.StageOrderMinOrderByAggregateInput
  _sum?: Prisma.StageOrderSumOrderByAggregateInput
}

export type StageOrderScalarWhereWithAggregatesInput = {
  AND?: Prisma.StageOrderScalarWhereWithAggregatesInput | Prisma.StageOrderScalarWhereWithAggregatesInput[]
  OR?: Prisma.StageOrderScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StageOrderScalarWhereWithAggregatesInput | Prisma.StageOrderScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"StageOrder"> | number
  status?: Prisma.StringWithAggregatesFilter<"StageOrder"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"StageOrder"> | string | null
}

export type StageOrderCreateInput = {
  status: string
  description?: string | null
}

export type StageOrderUncheckedCreateInput = {
  id?: number
  status: string
  description?: string | null
}

export type StageOrderUpdateInput = {
  status?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type StageOrderUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type StageOrderCreateManyInput = {
  id?: number
  status: string
  description?: string | null
}

export type StageOrderUpdateManyMutationInput = {
  status?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type StageOrderUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type StageOrderOrderByRelevanceInput = {
  fields: Prisma.StageOrderOrderByRelevanceFieldEnum | Prisma.StageOrderOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type StageOrderCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type StageOrderAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StageOrderMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type StageOrderMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type StageOrderSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type StageOrderSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  status?: boolean
  description?: boolean
}, ExtArgs["result"]["stageOrder"]>



export type StageOrderSelectScalar = {
  id?: boolean
  status?: boolean
  description?: boolean
}

export type StageOrderOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "status" | "description", ExtArgs["result"]["stageOrder"]>

export type $StageOrderPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StageOrder"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    status: string
    description: string | null
  }, ExtArgs["result"]["stageOrder"]>
  composites: {}
}

export type StageOrderGetPayload<S extends boolean | null | undefined | StageOrderDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StageOrderPayload, S>

export type StageOrderCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StageOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StageOrderCountAggregateInputType | true
  }

export interface StageOrderDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StageOrder'], meta: { name: 'StageOrder' } }
  /**
   * Find zero or one StageOrder that matches the filter.
   * @param {StageOrderFindUniqueArgs} args - Arguments to find a StageOrder
   * @example
   * // Get one StageOrder
   * const stageOrder = await prisma.stageOrder.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StageOrderFindUniqueArgs>(args: Prisma.SelectSubset<T, StageOrderFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StageOrderClient<runtime.Types.Result.GetResult<Prisma.$StageOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StageOrder that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StageOrderFindUniqueOrThrowArgs} args - Arguments to find a StageOrder
   * @example
   * // Get one StageOrder
   * const stageOrder = await prisma.stageOrder.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StageOrderFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StageOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StageOrderClient<runtime.Types.Result.GetResult<Prisma.$StageOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StageOrder that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StageOrderFindFirstArgs} args - Arguments to find a StageOrder
   * @example
   * // Get one StageOrder
   * const stageOrder = await prisma.stageOrder.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StageOrderFindFirstArgs>(args?: Prisma.SelectSubset<T, StageOrderFindFirstArgs<ExtArgs>>): Prisma.Prisma__StageOrderClient<runtime.Types.Result.GetResult<Prisma.$StageOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StageOrder that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StageOrderFindFirstOrThrowArgs} args - Arguments to find a StageOrder
   * @example
   * // Get one StageOrder
   * const stageOrder = await prisma.stageOrder.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StageOrderFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StageOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StageOrderClient<runtime.Types.Result.GetResult<Prisma.$StageOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StageOrders that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StageOrderFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StageOrders
   * const stageOrders = await prisma.stageOrder.findMany()
   * 
   * // Get first 10 StageOrders
   * const stageOrders = await prisma.stageOrder.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const stageOrderWithIdOnly = await prisma.stageOrder.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StageOrderFindManyArgs>(args?: Prisma.SelectSubset<T, StageOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StageOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StageOrder.
   * @param {StageOrderCreateArgs} args - Arguments to create a StageOrder.
   * @example
   * // Create one StageOrder
   * const StageOrder = await prisma.stageOrder.create({
   *   data: {
   *     // ... data to create a StageOrder
   *   }
   * })
   * 
   */
  create<T extends StageOrderCreateArgs>(args: Prisma.SelectSubset<T, StageOrderCreateArgs<ExtArgs>>): Prisma.Prisma__StageOrderClient<runtime.Types.Result.GetResult<Prisma.$StageOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StageOrders.
   * @param {StageOrderCreateManyArgs} args - Arguments to create many StageOrders.
   * @example
   * // Create many StageOrders
   * const stageOrder = await prisma.stageOrder.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StageOrderCreateManyArgs>(args?: Prisma.SelectSubset<T, StageOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a StageOrder.
   * @param {StageOrderDeleteArgs} args - Arguments to delete one StageOrder.
   * @example
   * // Delete one StageOrder
   * const StageOrder = await prisma.stageOrder.delete({
   *   where: {
   *     // ... filter to delete one StageOrder
   *   }
   * })
   * 
   */
  delete<T extends StageOrderDeleteArgs>(args: Prisma.SelectSubset<T, StageOrderDeleteArgs<ExtArgs>>): Prisma.Prisma__StageOrderClient<runtime.Types.Result.GetResult<Prisma.$StageOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StageOrder.
   * @param {StageOrderUpdateArgs} args - Arguments to update one StageOrder.
   * @example
   * // Update one StageOrder
   * const stageOrder = await prisma.stageOrder.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StageOrderUpdateArgs>(args: Prisma.SelectSubset<T, StageOrderUpdateArgs<ExtArgs>>): Prisma.Prisma__StageOrderClient<runtime.Types.Result.GetResult<Prisma.$StageOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StageOrders.
   * @param {StageOrderDeleteManyArgs} args - Arguments to filter StageOrders to delete.
   * @example
   * // Delete a few StageOrders
   * const { count } = await prisma.stageOrder.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StageOrderDeleteManyArgs>(args?: Prisma.SelectSubset<T, StageOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StageOrders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StageOrderUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StageOrders
   * const stageOrder = await prisma.stageOrder.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StageOrderUpdateManyArgs>(args: Prisma.SelectSubset<T, StageOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one StageOrder.
   * @param {StageOrderUpsertArgs} args - Arguments to update or create a StageOrder.
   * @example
   * // Update or create a StageOrder
   * const stageOrder = await prisma.stageOrder.upsert({
   *   create: {
   *     // ... data to create a StageOrder
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StageOrder we want to update
   *   }
   * })
   */
  upsert<T extends StageOrderUpsertArgs>(args: Prisma.SelectSubset<T, StageOrderUpsertArgs<ExtArgs>>): Prisma.Prisma__StageOrderClient<runtime.Types.Result.GetResult<Prisma.$StageOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StageOrders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StageOrderCountArgs} args - Arguments to filter StageOrders to count.
   * @example
   * // Count the number of StageOrders
   * const count = await prisma.stageOrder.count({
   *   where: {
   *     // ... the filter for the StageOrders we want to count
   *   }
   * })
  **/
  count<T extends StageOrderCountArgs>(
    args?: Prisma.Subset<T, StageOrderCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StageOrderCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StageOrder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StageOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StageOrderAggregateArgs>(args: Prisma.Subset<T, StageOrderAggregateArgs>): Prisma.PrismaPromise<GetStageOrderAggregateType<T>>

  /**
   * Group by StageOrder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StageOrderGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StageOrderGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StageOrderGroupByArgs['orderBy'] }
      : { orderBy?: StageOrderGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StageOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStageOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StageOrder model
 */
readonly fields: StageOrderFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StageOrder.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StageOrderClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StageOrder model
 */
export interface StageOrderFieldRefs {
  readonly id: Prisma.FieldRef<"StageOrder", 'Int'>
  readonly status: Prisma.FieldRef<"StageOrder", 'String'>
  readonly description: Prisma.FieldRef<"StageOrder", 'String'>
}
    

// Custom InputTypes
/**
 * StageOrder findUnique
 */
export type StageOrderFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StageOrder
   */
  select?: Prisma.StageOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StageOrder
   */
  omit?: Prisma.StageOrderOmit<ExtArgs> | null
  /**
   * Filter, which StageOrder to fetch.
   */
  where: Prisma.StageOrderWhereUniqueInput
}

/**
 * StageOrder findUniqueOrThrow
 */
export type StageOrderFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StageOrder
   */
  select?: Prisma.StageOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StageOrder
   */
  omit?: Prisma.StageOrderOmit<ExtArgs> | null
  /**
   * Filter, which StageOrder to fetch.
   */
  where: Prisma.StageOrderWhereUniqueInput
}

/**
 * StageOrder findFirst
 */
export type StageOrderFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StageOrder
   */
  select?: Prisma.StageOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StageOrder
   */
  omit?: Prisma.StageOrderOmit<ExtArgs> | null
  /**
   * Filter, which StageOrder to fetch.
   */
  where?: Prisma.StageOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StageOrders to fetch.
   */
  orderBy?: Prisma.StageOrderOrderByWithRelationInput | Prisma.StageOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StageOrders.
   */
  cursor?: Prisma.StageOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StageOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StageOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StageOrders.
   */
  distinct?: Prisma.StageOrderScalarFieldEnum | Prisma.StageOrderScalarFieldEnum[]
}

/**
 * StageOrder findFirstOrThrow
 */
export type StageOrderFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StageOrder
   */
  select?: Prisma.StageOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StageOrder
   */
  omit?: Prisma.StageOrderOmit<ExtArgs> | null
  /**
   * Filter, which StageOrder to fetch.
   */
  where?: Prisma.StageOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StageOrders to fetch.
   */
  orderBy?: Prisma.StageOrderOrderByWithRelationInput | Prisma.StageOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StageOrders.
   */
  cursor?: Prisma.StageOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StageOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StageOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StageOrders.
   */
  distinct?: Prisma.StageOrderScalarFieldEnum | Prisma.StageOrderScalarFieldEnum[]
}

/**
 * StageOrder findMany
 */
export type StageOrderFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StageOrder
   */
  select?: Prisma.StageOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StageOrder
   */
  omit?: Prisma.StageOrderOmit<ExtArgs> | null
  /**
   * Filter, which StageOrders to fetch.
   */
  where?: Prisma.StageOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StageOrders to fetch.
   */
  orderBy?: Prisma.StageOrderOrderByWithRelationInput | Prisma.StageOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StageOrders.
   */
  cursor?: Prisma.StageOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StageOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StageOrders.
   */
  skip?: number
  distinct?: Prisma.StageOrderScalarFieldEnum | Prisma.StageOrderScalarFieldEnum[]
}

/**
 * StageOrder create
 */
export type StageOrderCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StageOrder
   */
  select?: Prisma.StageOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StageOrder
   */
  omit?: Prisma.StageOrderOmit<ExtArgs> | null
  /**
   * The data needed to create a StageOrder.
   */
  data: Prisma.XOR<Prisma.StageOrderCreateInput, Prisma.StageOrderUncheckedCreateInput>
}

/**
 * StageOrder createMany
 */
export type StageOrderCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StageOrders.
   */
  data: Prisma.StageOrderCreateManyInput | Prisma.StageOrderCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StageOrder update
 */
export type StageOrderUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StageOrder
   */
  select?: Prisma.StageOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StageOrder
   */
  omit?: Prisma.StageOrderOmit<ExtArgs> | null
  /**
   * The data needed to update a StageOrder.
   */
  data: Prisma.XOR<Prisma.StageOrderUpdateInput, Prisma.StageOrderUncheckedUpdateInput>
  /**
   * Choose, which StageOrder to update.
   */
  where: Prisma.StageOrderWhereUniqueInput
}

/**
 * StageOrder updateMany
 */
export type StageOrderUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StageOrders.
   */
  data: Prisma.XOR<Prisma.StageOrderUpdateManyMutationInput, Prisma.StageOrderUncheckedUpdateManyInput>
  /**
   * Filter which StageOrders to update
   */
  where?: Prisma.StageOrderWhereInput
  /**
   * Limit how many StageOrders to update.
   */
  limit?: number
}

/**
 * StageOrder upsert
 */
export type StageOrderUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StageOrder
   */
  select?: Prisma.StageOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StageOrder
   */
  omit?: Prisma.StageOrderOmit<ExtArgs> | null
  /**
   * The filter to search for the StageOrder to update in case it exists.
   */
  where: Prisma.StageOrderWhereUniqueInput
  /**
   * In case the StageOrder found by the `where` argument doesn't exist, create a new StageOrder with this data.
   */
  create: Prisma.XOR<Prisma.StageOrderCreateInput, Prisma.StageOrderUncheckedCreateInput>
  /**
   * In case the StageOrder was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StageOrderUpdateInput, Prisma.StageOrderUncheckedUpdateInput>
}

/**
 * StageOrder delete
 */
export type StageOrderDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StageOrder
   */
  select?: Prisma.StageOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StageOrder
   */
  omit?: Prisma.StageOrderOmit<ExtArgs> | null
  /**
   * Filter which StageOrder to delete.
   */
  where: Prisma.StageOrderWhereUniqueInput
}

/**
 * StageOrder deleteMany
 */
export type StageOrderDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StageOrders to delete
   */
  where?: Prisma.StageOrderWhereInput
  /**
   * Limit how many StageOrders to delete.
   */
  limit?: number
}

/**
 * StageOrder without action
 */
export type StageOrderDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StageOrder
   */
  select?: Prisma.StageOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StageOrder
   */
  omit?: Prisma.StageOrderOmit<ExtArgs> | null
}
