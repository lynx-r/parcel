
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `FsmTransition` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model FsmTransition
 * 
 */
export type FsmTransitionModel = runtime.Types.Result.DefaultSelection<Prisma.$FsmTransitionPayload>

export type AggregateFsmTransition = {
  _count: FsmTransitionCountAggregateOutputType | null
  _avg: FsmTransitionAvgAggregateOutputType | null
  _sum: FsmTransitionSumAggregateOutputType | null
  _min: FsmTransitionMinAggregateOutputType | null
  _max: FsmTransitionMaxAggregateOutputType | null
}

export type FsmTransitionAvgAggregateOutputType = {
  id: number | null
  from_state_id: number | null
  action_id: number | null
  to_state_id: number | null
}

export type FsmTransitionSumAggregateOutputType = {
  id: number | null
  from_state_id: number | null
  action_id: number | null
  to_state_id: number | null
}

export type FsmTransitionMinAggregateOutputType = {
  id: number | null
  from_state_id: number | null
  action_id: number | null
  to_state_id: number | null
}

export type FsmTransitionMaxAggregateOutputType = {
  id: number | null
  from_state_id: number | null
  action_id: number | null
  to_state_id: number | null
}

export type FsmTransitionCountAggregateOutputType = {
  id: number
  from_state_id: number
  action_id: number
  to_state_id: number
  _all: number
}


export type FsmTransitionAvgAggregateInputType = {
  id?: true
  from_state_id?: true
  action_id?: true
  to_state_id?: true
}

export type FsmTransitionSumAggregateInputType = {
  id?: true
  from_state_id?: true
  action_id?: true
  to_state_id?: true
}

export type FsmTransitionMinAggregateInputType = {
  id?: true
  from_state_id?: true
  action_id?: true
  to_state_id?: true
}

export type FsmTransitionMaxAggregateInputType = {
  id?: true
  from_state_id?: true
  action_id?: true
  to_state_id?: true
}

export type FsmTransitionCountAggregateInputType = {
  id?: true
  from_state_id?: true
  action_id?: true
  to_state_id?: true
  _all?: true
}

export type FsmTransitionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FsmTransition to aggregate.
   */
  where?: Prisma.FsmTransitionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmTransitions to fetch.
   */
  orderBy?: Prisma.FsmTransitionOrderByWithRelationInput | Prisma.FsmTransitionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FsmTransitionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmTransitions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmTransitions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FsmTransitions
  **/
  _count?: true | FsmTransitionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FsmTransitionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FsmTransitionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FsmTransitionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FsmTransitionMaxAggregateInputType
}

export type GetFsmTransitionAggregateType<T extends FsmTransitionAggregateArgs> = {
      [P in keyof T & keyof AggregateFsmTransition]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFsmTransition[P]>
    : Prisma.GetScalarType<T[P], AggregateFsmTransition[P]>
}




export type FsmTransitionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FsmTransitionWhereInput
  orderBy?: Prisma.FsmTransitionOrderByWithAggregationInput | Prisma.FsmTransitionOrderByWithAggregationInput[]
  by: Prisma.FsmTransitionScalarFieldEnum[] | Prisma.FsmTransitionScalarFieldEnum
  having?: Prisma.FsmTransitionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FsmTransitionCountAggregateInputType | true
  _avg?: FsmTransitionAvgAggregateInputType
  _sum?: FsmTransitionSumAggregateInputType
  _min?: FsmTransitionMinAggregateInputType
  _max?: FsmTransitionMaxAggregateInputType
}

export type FsmTransitionGroupByOutputType = {
  id: number
  from_state_id: number
  action_id: number
  to_state_id: number
  _count: FsmTransitionCountAggregateOutputType | null
  _avg: FsmTransitionAvgAggregateOutputType | null
  _sum: FsmTransitionSumAggregateOutputType | null
  _min: FsmTransitionMinAggregateOutputType | null
  _max: FsmTransitionMaxAggregateOutputType | null
}

type GetFsmTransitionGroupByPayload<T extends FsmTransitionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FsmTransitionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FsmTransitionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FsmTransitionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FsmTransitionGroupByOutputType[P]>
      }
    >
  >



export type FsmTransitionWhereInput = {
  AND?: Prisma.FsmTransitionWhereInput | Prisma.FsmTransitionWhereInput[]
  OR?: Prisma.FsmTransitionWhereInput[]
  NOT?: Prisma.FsmTransitionWhereInput | Prisma.FsmTransitionWhereInput[]
  id?: Prisma.IntFilter<"FsmTransition"> | number
  from_state_id?: Prisma.IntFilter<"FsmTransition"> | number
  action_id?: Prisma.IntFilter<"FsmTransition"> | number
  to_state_id?: Prisma.IntFilter<"FsmTransition"> | number
  from_state?: Prisma.XOR<Prisma.FsmStateScalarRelationFilter, Prisma.FsmStateWhereInput>
  to_state?: Prisma.XOR<Prisma.FsmStateScalarRelationFilter, Prisma.FsmStateWhereInput>
  action?: Prisma.XOR<Prisma.FsmActionScalarRelationFilter, Prisma.FsmActionWhereInput>
}

export type FsmTransitionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  from_state_id?: Prisma.SortOrder
  action_id?: Prisma.SortOrder
  to_state_id?: Prisma.SortOrder
  from_state?: Prisma.FsmStateOrderByWithRelationInput
  to_state?: Prisma.FsmStateOrderByWithRelationInput
  action?: Prisma.FsmActionOrderByWithRelationInput
}

export type FsmTransitionWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.FsmTransitionWhereInput | Prisma.FsmTransitionWhereInput[]
  OR?: Prisma.FsmTransitionWhereInput[]
  NOT?: Prisma.FsmTransitionWhereInput | Prisma.FsmTransitionWhereInput[]
  from_state_id?: Prisma.IntFilter<"FsmTransition"> | number
  action_id?: Prisma.IntFilter<"FsmTransition"> | number
  to_state_id?: Prisma.IntFilter<"FsmTransition"> | number
  from_state?: Prisma.XOR<Prisma.FsmStateScalarRelationFilter, Prisma.FsmStateWhereInput>
  to_state?: Prisma.XOR<Prisma.FsmStateScalarRelationFilter, Prisma.FsmStateWhereInput>
  action?: Prisma.XOR<Prisma.FsmActionScalarRelationFilter, Prisma.FsmActionWhereInput>
}, "id">

export type FsmTransitionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  from_state_id?: Prisma.SortOrder
  action_id?: Prisma.SortOrder
  to_state_id?: Prisma.SortOrder
  _count?: Prisma.FsmTransitionCountOrderByAggregateInput
  _avg?: Prisma.FsmTransitionAvgOrderByAggregateInput
  _max?: Prisma.FsmTransitionMaxOrderByAggregateInput
  _min?: Prisma.FsmTransitionMinOrderByAggregateInput
  _sum?: Prisma.FsmTransitionSumOrderByAggregateInput
}

export type FsmTransitionScalarWhereWithAggregatesInput = {
  AND?: Prisma.FsmTransitionScalarWhereWithAggregatesInput | Prisma.FsmTransitionScalarWhereWithAggregatesInput[]
  OR?: Prisma.FsmTransitionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FsmTransitionScalarWhereWithAggregatesInput | Prisma.FsmTransitionScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"FsmTransition"> | number
  from_state_id?: Prisma.IntWithAggregatesFilter<"FsmTransition"> | number
  action_id?: Prisma.IntWithAggregatesFilter<"FsmTransition"> | number
  to_state_id?: Prisma.IntWithAggregatesFilter<"FsmTransition"> | number
}

export type FsmTransitionCreateInput = {
  from_state: Prisma.FsmStateCreateNestedOneWithoutTransitions_fromInput
  to_state: Prisma.FsmStateCreateNestedOneWithoutTransitions_toInput
  action: Prisma.FsmActionCreateNestedOneWithoutTransitionsInput
}

export type FsmTransitionUncheckedCreateInput = {
  id?: number
  from_state_id: number
  action_id: number
  to_state_id: number
}

export type FsmTransitionUpdateInput = {
  from_state?: Prisma.FsmStateUpdateOneRequiredWithoutTransitions_fromNestedInput
  to_state?: Prisma.FsmStateUpdateOneRequiredWithoutTransitions_toNestedInput
  action?: Prisma.FsmActionUpdateOneRequiredWithoutTransitionsNestedInput
}

export type FsmTransitionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  from_state_id?: Prisma.IntFieldUpdateOperationsInput | number
  action_id?: Prisma.IntFieldUpdateOperationsInput | number
  to_state_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FsmTransitionCreateManyInput = {
  id?: number
  from_state_id: number
  action_id: number
  to_state_id: number
}

export type FsmTransitionUpdateManyMutationInput = {

}

export type FsmTransitionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  from_state_id?: Prisma.IntFieldUpdateOperationsInput | number
  action_id?: Prisma.IntFieldUpdateOperationsInput | number
  to_state_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FsmTransitionListRelationFilter = {
  every?: Prisma.FsmTransitionWhereInput
  some?: Prisma.FsmTransitionWhereInput
  none?: Prisma.FsmTransitionWhereInput
}

export type FsmTransitionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FsmTransitionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  from_state_id?: Prisma.SortOrder
  action_id?: Prisma.SortOrder
  to_state_id?: Prisma.SortOrder
}

export type FsmTransitionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  from_state_id?: Prisma.SortOrder
  action_id?: Prisma.SortOrder
  to_state_id?: Prisma.SortOrder
}

export type FsmTransitionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  from_state_id?: Prisma.SortOrder
  action_id?: Prisma.SortOrder
  to_state_id?: Prisma.SortOrder
}

export type FsmTransitionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  from_state_id?: Prisma.SortOrder
  action_id?: Prisma.SortOrder
  to_state_id?: Prisma.SortOrder
}

export type FsmTransitionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  from_state_id?: Prisma.SortOrder
  action_id?: Prisma.SortOrder
  to_state_id?: Prisma.SortOrder
}

export type FsmTransitionCreateNestedManyWithoutFrom_stateInput = {
  create?: Prisma.XOR<Prisma.FsmTransitionCreateWithoutFrom_stateInput, Prisma.FsmTransitionUncheckedCreateWithoutFrom_stateInput> | Prisma.FsmTransitionCreateWithoutFrom_stateInput[] | Prisma.FsmTransitionUncheckedCreateWithoutFrom_stateInput[]
  connectOrCreate?: Prisma.FsmTransitionCreateOrConnectWithoutFrom_stateInput | Prisma.FsmTransitionCreateOrConnectWithoutFrom_stateInput[]
  createMany?: Prisma.FsmTransitionCreateManyFrom_stateInputEnvelope
  connect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
}

export type FsmTransitionCreateNestedManyWithoutTo_stateInput = {
  create?: Prisma.XOR<Prisma.FsmTransitionCreateWithoutTo_stateInput, Prisma.FsmTransitionUncheckedCreateWithoutTo_stateInput> | Prisma.FsmTransitionCreateWithoutTo_stateInput[] | Prisma.FsmTransitionUncheckedCreateWithoutTo_stateInput[]
  connectOrCreate?: Prisma.FsmTransitionCreateOrConnectWithoutTo_stateInput | Prisma.FsmTransitionCreateOrConnectWithoutTo_stateInput[]
  createMany?: Prisma.FsmTransitionCreateManyTo_stateInputEnvelope
  connect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
}

export type FsmTransitionUncheckedCreateNestedManyWithoutFrom_stateInput = {
  create?: Prisma.XOR<Prisma.FsmTransitionCreateWithoutFrom_stateInput, Prisma.FsmTransitionUncheckedCreateWithoutFrom_stateInput> | Prisma.FsmTransitionCreateWithoutFrom_stateInput[] | Prisma.FsmTransitionUncheckedCreateWithoutFrom_stateInput[]
  connectOrCreate?: Prisma.FsmTransitionCreateOrConnectWithoutFrom_stateInput | Prisma.FsmTransitionCreateOrConnectWithoutFrom_stateInput[]
  createMany?: Prisma.FsmTransitionCreateManyFrom_stateInputEnvelope
  connect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
}

export type FsmTransitionUncheckedCreateNestedManyWithoutTo_stateInput = {
  create?: Prisma.XOR<Prisma.FsmTransitionCreateWithoutTo_stateInput, Prisma.FsmTransitionUncheckedCreateWithoutTo_stateInput> | Prisma.FsmTransitionCreateWithoutTo_stateInput[] | Prisma.FsmTransitionUncheckedCreateWithoutTo_stateInput[]
  connectOrCreate?: Prisma.FsmTransitionCreateOrConnectWithoutTo_stateInput | Prisma.FsmTransitionCreateOrConnectWithoutTo_stateInput[]
  createMany?: Prisma.FsmTransitionCreateManyTo_stateInputEnvelope
  connect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
}

export type FsmTransitionUpdateManyWithoutFrom_stateNestedInput = {
  create?: Prisma.XOR<Prisma.FsmTransitionCreateWithoutFrom_stateInput, Prisma.FsmTransitionUncheckedCreateWithoutFrom_stateInput> | Prisma.FsmTransitionCreateWithoutFrom_stateInput[] | Prisma.FsmTransitionUncheckedCreateWithoutFrom_stateInput[]
  connectOrCreate?: Prisma.FsmTransitionCreateOrConnectWithoutFrom_stateInput | Prisma.FsmTransitionCreateOrConnectWithoutFrom_stateInput[]
  upsert?: Prisma.FsmTransitionUpsertWithWhereUniqueWithoutFrom_stateInput | Prisma.FsmTransitionUpsertWithWhereUniqueWithoutFrom_stateInput[]
  createMany?: Prisma.FsmTransitionCreateManyFrom_stateInputEnvelope
  set?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  disconnect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  delete?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  connect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  update?: Prisma.FsmTransitionUpdateWithWhereUniqueWithoutFrom_stateInput | Prisma.FsmTransitionUpdateWithWhereUniqueWithoutFrom_stateInput[]
  updateMany?: Prisma.FsmTransitionUpdateManyWithWhereWithoutFrom_stateInput | Prisma.FsmTransitionUpdateManyWithWhereWithoutFrom_stateInput[]
  deleteMany?: Prisma.FsmTransitionScalarWhereInput | Prisma.FsmTransitionScalarWhereInput[]
}

export type FsmTransitionUpdateManyWithoutTo_stateNestedInput = {
  create?: Prisma.XOR<Prisma.FsmTransitionCreateWithoutTo_stateInput, Prisma.FsmTransitionUncheckedCreateWithoutTo_stateInput> | Prisma.FsmTransitionCreateWithoutTo_stateInput[] | Prisma.FsmTransitionUncheckedCreateWithoutTo_stateInput[]
  connectOrCreate?: Prisma.FsmTransitionCreateOrConnectWithoutTo_stateInput | Prisma.FsmTransitionCreateOrConnectWithoutTo_stateInput[]
  upsert?: Prisma.FsmTransitionUpsertWithWhereUniqueWithoutTo_stateInput | Prisma.FsmTransitionUpsertWithWhereUniqueWithoutTo_stateInput[]
  createMany?: Prisma.FsmTransitionCreateManyTo_stateInputEnvelope
  set?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  disconnect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  delete?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  connect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  update?: Prisma.FsmTransitionUpdateWithWhereUniqueWithoutTo_stateInput | Prisma.FsmTransitionUpdateWithWhereUniqueWithoutTo_stateInput[]
  updateMany?: Prisma.FsmTransitionUpdateManyWithWhereWithoutTo_stateInput | Prisma.FsmTransitionUpdateManyWithWhereWithoutTo_stateInput[]
  deleteMany?: Prisma.FsmTransitionScalarWhereInput | Prisma.FsmTransitionScalarWhereInput[]
}

export type FsmTransitionUncheckedUpdateManyWithoutFrom_stateNestedInput = {
  create?: Prisma.XOR<Prisma.FsmTransitionCreateWithoutFrom_stateInput, Prisma.FsmTransitionUncheckedCreateWithoutFrom_stateInput> | Prisma.FsmTransitionCreateWithoutFrom_stateInput[] | Prisma.FsmTransitionUncheckedCreateWithoutFrom_stateInput[]
  connectOrCreate?: Prisma.FsmTransitionCreateOrConnectWithoutFrom_stateInput | Prisma.FsmTransitionCreateOrConnectWithoutFrom_stateInput[]
  upsert?: Prisma.FsmTransitionUpsertWithWhereUniqueWithoutFrom_stateInput | Prisma.FsmTransitionUpsertWithWhereUniqueWithoutFrom_stateInput[]
  createMany?: Prisma.FsmTransitionCreateManyFrom_stateInputEnvelope
  set?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  disconnect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  delete?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  connect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  update?: Prisma.FsmTransitionUpdateWithWhereUniqueWithoutFrom_stateInput | Prisma.FsmTransitionUpdateWithWhereUniqueWithoutFrom_stateInput[]
  updateMany?: Prisma.FsmTransitionUpdateManyWithWhereWithoutFrom_stateInput | Prisma.FsmTransitionUpdateManyWithWhereWithoutFrom_stateInput[]
  deleteMany?: Prisma.FsmTransitionScalarWhereInput | Prisma.FsmTransitionScalarWhereInput[]
}

export type FsmTransitionUncheckedUpdateManyWithoutTo_stateNestedInput = {
  create?: Prisma.XOR<Prisma.FsmTransitionCreateWithoutTo_stateInput, Prisma.FsmTransitionUncheckedCreateWithoutTo_stateInput> | Prisma.FsmTransitionCreateWithoutTo_stateInput[] | Prisma.FsmTransitionUncheckedCreateWithoutTo_stateInput[]
  connectOrCreate?: Prisma.FsmTransitionCreateOrConnectWithoutTo_stateInput | Prisma.FsmTransitionCreateOrConnectWithoutTo_stateInput[]
  upsert?: Prisma.FsmTransitionUpsertWithWhereUniqueWithoutTo_stateInput | Prisma.FsmTransitionUpsertWithWhereUniqueWithoutTo_stateInput[]
  createMany?: Prisma.FsmTransitionCreateManyTo_stateInputEnvelope
  set?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  disconnect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  delete?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  connect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  update?: Prisma.FsmTransitionUpdateWithWhereUniqueWithoutTo_stateInput | Prisma.FsmTransitionUpdateWithWhereUniqueWithoutTo_stateInput[]
  updateMany?: Prisma.FsmTransitionUpdateManyWithWhereWithoutTo_stateInput | Prisma.FsmTransitionUpdateManyWithWhereWithoutTo_stateInput[]
  deleteMany?: Prisma.FsmTransitionScalarWhereInput | Prisma.FsmTransitionScalarWhereInput[]
}

export type FsmTransitionCreateNestedManyWithoutActionInput = {
  create?: Prisma.XOR<Prisma.FsmTransitionCreateWithoutActionInput, Prisma.FsmTransitionUncheckedCreateWithoutActionInput> | Prisma.FsmTransitionCreateWithoutActionInput[] | Prisma.FsmTransitionUncheckedCreateWithoutActionInput[]
  connectOrCreate?: Prisma.FsmTransitionCreateOrConnectWithoutActionInput | Prisma.FsmTransitionCreateOrConnectWithoutActionInput[]
  createMany?: Prisma.FsmTransitionCreateManyActionInputEnvelope
  connect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
}

export type FsmTransitionUncheckedCreateNestedManyWithoutActionInput = {
  create?: Prisma.XOR<Prisma.FsmTransitionCreateWithoutActionInput, Prisma.FsmTransitionUncheckedCreateWithoutActionInput> | Prisma.FsmTransitionCreateWithoutActionInput[] | Prisma.FsmTransitionUncheckedCreateWithoutActionInput[]
  connectOrCreate?: Prisma.FsmTransitionCreateOrConnectWithoutActionInput | Prisma.FsmTransitionCreateOrConnectWithoutActionInput[]
  createMany?: Prisma.FsmTransitionCreateManyActionInputEnvelope
  connect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
}

export type FsmTransitionUpdateManyWithoutActionNestedInput = {
  create?: Prisma.XOR<Prisma.FsmTransitionCreateWithoutActionInput, Prisma.FsmTransitionUncheckedCreateWithoutActionInput> | Prisma.FsmTransitionCreateWithoutActionInput[] | Prisma.FsmTransitionUncheckedCreateWithoutActionInput[]
  connectOrCreate?: Prisma.FsmTransitionCreateOrConnectWithoutActionInput | Prisma.FsmTransitionCreateOrConnectWithoutActionInput[]
  upsert?: Prisma.FsmTransitionUpsertWithWhereUniqueWithoutActionInput | Prisma.FsmTransitionUpsertWithWhereUniqueWithoutActionInput[]
  createMany?: Prisma.FsmTransitionCreateManyActionInputEnvelope
  set?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  disconnect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  delete?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  connect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  update?: Prisma.FsmTransitionUpdateWithWhereUniqueWithoutActionInput | Prisma.FsmTransitionUpdateWithWhereUniqueWithoutActionInput[]
  updateMany?: Prisma.FsmTransitionUpdateManyWithWhereWithoutActionInput | Prisma.FsmTransitionUpdateManyWithWhereWithoutActionInput[]
  deleteMany?: Prisma.FsmTransitionScalarWhereInput | Prisma.FsmTransitionScalarWhereInput[]
}

export type FsmTransitionUncheckedUpdateManyWithoutActionNestedInput = {
  create?: Prisma.XOR<Prisma.FsmTransitionCreateWithoutActionInput, Prisma.FsmTransitionUncheckedCreateWithoutActionInput> | Prisma.FsmTransitionCreateWithoutActionInput[] | Prisma.FsmTransitionUncheckedCreateWithoutActionInput[]
  connectOrCreate?: Prisma.FsmTransitionCreateOrConnectWithoutActionInput | Prisma.FsmTransitionCreateOrConnectWithoutActionInput[]
  upsert?: Prisma.FsmTransitionUpsertWithWhereUniqueWithoutActionInput | Prisma.FsmTransitionUpsertWithWhereUniqueWithoutActionInput[]
  createMany?: Prisma.FsmTransitionCreateManyActionInputEnvelope
  set?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  disconnect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  delete?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  connect?: Prisma.FsmTransitionWhereUniqueInput | Prisma.FsmTransitionWhereUniqueInput[]
  update?: Prisma.FsmTransitionUpdateWithWhereUniqueWithoutActionInput | Prisma.FsmTransitionUpdateWithWhereUniqueWithoutActionInput[]
  updateMany?: Prisma.FsmTransitionUpdateManyWithWhereWithoutActionInput | Prisma.FsmTransitionUpdateManyWithWhereWithoutActionInput[]
  deleteMany?: Prisma.FsmTransitionScalarWhereInput | Prisma.FsmTransitionScalarWhereInput[]
}

export type FsmTransitionCreateWithoutFrom_stateInput = {
  to_state: Prisma.FsmStateCreateNestedOneWithoutTransitions_toInput
  action: Prisma.FsmActionCreateNestedOneWithoutTransitionsInput
}

export type FsmTransitionUncheckedCreateWithoutFrom_stateInput = {
  id?: number
  action_id: number
  to_state_id: number
}

export type FsmTransitionCreateOrConnectWithoutFrom_stateInput = {
  where: Prisma.FsmTransitionWhereUniqueInput
  create: Prisma.XOR<Prisma.FsmTransitionCreateWithoutFrom_stateInput, Prisma.FsmTransitionUncheckedCreateWithoutFrom_stateInput>
}

export type FsmTransitionCreateManyFrom_stateInputEnvelope = {
  data: Prisma.FsmTransitionCreateManyFrom_stateInput | Prisma.FsmTransitionCreateManyFrom_stateInput[]
  skipDuplicates?: boolean
}

export type FsmTransitionCreateWithoutTo_stateInput = {
  from_state: Prisma.FsmStateCreateNestedOneWithoutTransitions_fromInput
  action: Prisma.FsmActionCreateNestedOneWithoutTransitionsInput
}

export type FsmTransitionUncheckedCreateWithoutTo_stateInput = {
  id?: number
  from_state_id: number
  action_id: number
}

export type FsmTransitionCreateOrConnectWithoutTo_stateInput = {
  where: Prisma.FsmTransitionWhereUniqueInput
  create: Prisma.XOR<Prisma.FsmTransitionCreateWithoutTo_stateInput, Prisma.FsmTransitionUncheckedCreateWithoutTo_stateInput>
}

export type FsmTransitionCreateManyTo_stateInputEnvelope = {
  data: Prisma.FsmTransitionCreateManyTo_stateInput | Prisma.FsmTransitionCreateManyTo_stateInput[]
  skipDuplicates?: boolean
}

export type FsmTransitionUpsertWithWhereUniqueWithoutFrom_stateInput = {
  where: Prisma.FsmTransitionWhereUniqueInput
  update: Prisma.XOR<Prisma.FsmTransitionUpdateWithoutFrom_stateInput, Prisma.FsmTransitionUncheckedUpdateWithoutFrom_stateInput>
  create: Prisma.XOR<Prisma.FsmTransitionCreateWithoutFrom_stateInput, Prisma.FsmTransitionUncheckedCreateWithoutFrom_stateInput>
}

export type FsmTransitionUpdateWithWhereUniqueWithoutFrom_stateInput = {
  where: Prisma.FsmTransitionWhereUniqueInput
  data: Prisma.XOR<Prisma.FsmTransitionUpdateWithoutFrom_stateInput, Prisma.FsmTransitionUncheckedUpdateWithoutFrom_stateInput>
}

export type FsmTransitionUpdateManyWithWhereWithoutFrom_stateInput = {
  where: Prisma.FsmTransitionScalarWhereInput
  data: Prisma.XOR<Prisma.FsmTransitionUpdateManyMutationInput, Prisma.FsmTransitionUncheckedUpdateManyWithoutFrom_stateInput>
}

export type FsmTransitionScalarWhereInput = {
  AND?: Prisma.FsmTransitionScalarWhereInput | Prisma.FsmTransitionScalarWhereInput[]
  OR?: Prisma.FsmTransitionScalarWhereInput[]
  NOT?: Prisma.FsmTransitionScalarWhereInput | Prisma.FsmTransitionScalarWhereInput[]
  id?: Prisma.IntFilter<"FsmTransition"> | number
  from_state_id?: Prisma.IntFilter<"FsmTransition"> | number
  action_id?: Prisma.IntFilter<"FsmTransition"> | number
  to_state_id?: Prisma.IntFilter<"FsmTransition"> | number
}

export type FsmTransitionUpsertWithWhereUniqueWithoutTo_stateInput = {
  where: Prisma.FsmTransitionWhereUniqueInput
  update: Prisma.XOR<Prisma.FsmTransitionUpdateWithoutTo_stateInput, Prisma.FsmTransitionUncheckedUpdateWithoutTo_stateInput>
  create: Prisma.XOR<Prisma.FsmTransitionCreateWithoutTo_stateInput, Prisma.FsmTransitionUncheckedCreateWithoutTo_stateInput>
}

export type FsmTransitionUpdateWithWhereUniqueWithoutTo_stateInput = {
  where: Prisma.FsmTransitionWhereUniqueInput
  data: Prisma.XOR<Prisma.FsmTransitionUpdateWithoutTo_stateInput, Prisma.FsmTransitionUncheckedUpdateWithoutTo_stateInput>
}

export type FsmTransitionUpdateManyWithWhereWithoutTo_stateInput = {
  where: Prisma.FsmTransitionScalarWhereInput
  data: Prisma.XOR<Prisma.FsmTransitionUpdateManyMutationInput, Prisma.FsmTransitionUncheckedUpdateManyWithoutTo_stateInput>
}

export type FsmTransitionCreateWithoutActionInput = {
  from_state: Prisma.FsmStateCreateNestedOneWithoutTransitions_fromInput
  to_state: Prisma.FsmStateCreateNestedOneWithoutTransitions_toInput
}

export type FsmTransitionUncheckedCreateWithoutActionInput = {
  id?: number
  from_state_id: number
  to_state_id: number
}

export type FsmTransitionCreateOrConnectWithoutActionInput = {
  where: Prisma.FsmTransitionWhereUniqueInput
  create: Prisma.XOR<Prisma.FsmTransitionCreateWithoutActionInput, Prisma.FsmTransitionUncheckedCreateWithoutActionInput>
}

export type FsmTransitionCreateManyActionInputEnvelope = {
  data: Prisma.FsmTransitionCreateManyActionInput | Prisma.FsmTransitionCreateManyActionInput[]
  skipDuplicates?: boolean
}

export type FsmTransitionUpsertWithWhereUniqueWithoutActionInput = {
  where: Prisma.FsmTransitionWhereUniqueInput
  update: Prisma.XOR<Prisma.FsmTransitionUpdateWithoutActionInput, Prisma.FsmTransitionUncheckedUpdateWithoutActionInput>
  create: Prisma.XOR<Prisma.FsmTransitionCreateWithoutActionInput, Prisma.FsmTransitionUncheckedCreateWithoutActionInput>
}

export type FsmTransitionUpdateWithWhereUniqueWithoutActionInput = {
  where: Prisma.FsmTransitionWhereUniqueInput
  data: Prisma.XOR<Prisma.FsmTransitionUpdateWithoutActionInput, Prisma.FsmTransitionUncheckedUpdateWithoutActionInput>
}

export type FsmTransitionUpdateManyWithWhereWithoutActionInput = {
  where: Prisma.FsmTransitionScalarWhereInput
  data: Prisma.XOR<Prisma.FsmTransitionUpdateManyMutationInput, Prisma.FsmTransitionUncheckedUpdateManyWithoutActionInput>
}

export type FsmTransitionCreateManyFrom_stateInput = {
  id?: number
  action_id: number
  to_state_id: number
}

export type FsmTransitionCreateManyTo_stateInput = {
  id?: number
  from_state_id: number
  action_id: number
}

export type FsmTransitionUpdateWithoutFrom_stateInput = {
  to_state?: Prisma.FsmStateUpdateOneRequiredWithoutTransitions_toNestedInput
  action?: Prisma.FsmActionUpdateOneRequiredWithoutTransitionsNestedInput
}

export type FsmTransitionUncheckedUpdateWithoutFrom_stateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  action_id?: Prisma.IntFieldUpdateOperationsInput | number
  to_state_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FsmTransitionUncheckedUpdateManyWithoutFrom_stateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  action_id?: Prisma.IntFieldUpdateOperationsInput | number
  to_state_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FsmTransitionUpdateWithoutTo_stateInput = {
  from_state?: Prisma.FsmStateUpdateOneRequiredWithoutTransitions_fromNestedInput
  action?: Prisma.FsmActionUpdateOneRequiredWithoutTransitionsNestedInput
}

export type FsmTransitionUncheckedUpdateWithoutTo_stateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  from_state_id?: Prisma.IntFieldUpdateOperationsInput | number
  action_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FsmTransitionUncheckedUpdateManyWithoutTo_stateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  from_state_id?: Prisma.IntFieldUpdateOperationsInput | number
  action_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FsmTransitionCreateManyActionInput = {
  id?: number
  from_state_id: number
  to_state_id: number
}

export type FsmTransitionUpdateWithoutActionInput = {
  from_state?: Prisma.FsmStateUpdateOneRequiredWithoutTransitions_fromNestedInput
  to_state?: Prisma.FsmStateUpdateOneRequiredWithoutTransitions_toNestedInput
}

export type FsmTransitionUncheckedUpdateWithoutActionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  from_state_id?: Prisma.IntFieldUpdateOperationsInput | number
  to_state_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FsmTransitionUncheckedUpdateManyWithoutActionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  from_state_id?: Prisma.IntFieldUpdateOperationsInput | number
  to_state_id?: Prisma.IntFieldUpdateOperationsInput | number
}



export type FsmTransitionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  from_state_id?: boolean
  action_id?: boolean
  to_state_id?: boolean
  from_state?: boolean | Prisma.FsmStateDefaultArgs<ExtArgs>
  to_state?: boolean | Prisma.FsmStateDefaultArgs<ExtArgs>
  action?: boolean | Prisma.FsmActionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fsmTransition"]>



export type FsmTransitionSelectScalar = {
  id?: boolean
  from_state_id?: boolean
  action_id?: boolean
  to_state_id?: boolean
}

export type FsmTransitionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "from_state_id" | "action_id" | "to_state_id", ExtArgs["result"]["fsmTransition"]>
export type FsmTransitionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  from_state?: boolean | Prisma.FsmStateDefaultArgs<ExtArgs>
  to_state?: boolean | Prisma.FsmStateDefaultArgs<ExtArgs>
  action?: boolean | Prisma.FsmActionDefaultArgs<ExtArgs>
}

export type $FsmTransitionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FsmTransition"
  objects: {
    from_state: Prisma.$FsmStatePayload<ExtArgs>
    to_state: Prisma.$FsmStatePayload<ExtArgs>
    action: Prisma.$FsmActionPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    from_state_id: number
    action_id: number
    to_state_id: number
  }, ExtArgs["result"]["fsmTransition"]>
  composites: {}
}

export type FsmTransitionGetPayload<S extends boolean | null | undefined | FsmTransitionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FsmTransitionPayload, S>

export type FsmTransitionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FsmTransitionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FsmTransitionCountAggregateInputType | true
  }

export interface FsmTransitionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FsmTransition'], meta: { name: 'FsmTransition' } }
  /**
   * Find zero or one FsmTransition that matches the filter.
   * @param {FsmTransitionFindUniqueArgs} args - Arguments to find a FsmTransition
   * @example
   * // Get one FsmTransition
   * const fsmTransition = await prisma.fsmTransition.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FsmTransitionFindUniqueArgs>(args: Prisma.SelectSubset<T, FsmTransitionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FsmTransitionClient<runtime.Types.Result.GetResult<Prisma.$FsmTransitionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FsmTransition that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FsmTransitionFindUniqueOrThrowArgs} args - Arguments to find a FsmTransition
   * @example
   * // Get one FsmTransition
   * const fsmTransition = await prisma.fsmTransition.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FsmTransitionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FsmTransitionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FsmTransitionClient<runtime.Types.Result.GetResult<Prisma.$FsmTransitionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FsmTransition that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmTransitionFindFirstArgs} args - Arguments to find a FsmTransition
   * @example
   * // Get one FsmTransition
   * const fsmTransition = await prisma.fsmTransition.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FsmTransitionFindFirstArgs>(args?: Prisma.SelectSubset<T, FsmTransitionFindFirstArgs<ExtArgs>>): Prisma.Prisma__FsmTransitionClient<runtime.Types.Result.GetResult<Prisma.$FsmTransitionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FsmTransition that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmTransitionFindFirstOrThrowArgs} args - Arguments to find a FsmTransition
   * @example
   * // Get one FsmTransition
   * const fsmTransition = await prisma.fsmTransition.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FsmTransitionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FsmTransitionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FsmTransitionClient<runtime.Types.Result.GetResult<Prisma.$FsmTransitionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FsmTransitions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmTransitionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FsmTransitions
   * const fsmTransitions = await prisma.fsmTransition.findMany()
   * 
   * // Get first 10 FsmTransitions
   * const fsmTransitions = await prisma.fsmTransition.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const fsmTransitionWithIdOnly = await prisma.fsmTransition.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FsmTransitionFindManyArgs>(args?: Prisma.SelectSubset<T, FsmTransitionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FsmTransitionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FsmTransition.
   * @param {FsmTransitionCreateArgs} args - Arguments to create a FsmTransition.
   * @example
   * // Create one FsmTransition
   * const FsmTransition = await prisma.fsmTransition.create({
   *   data: {
   *     // ... data to create a FsmTransition
   *   }
   * })
   * 
   */
  create<T extends FsmTransitionCreateArgs>(args: Prisma.SelectSubset<T, FsmTransitionCreateArgs<ExtArgs>>): Prisma.Prisma__FsmTransitionClient<runtime.Types.Result.GetResult<Prisma.$FsmTransitionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FsmTransitions.
   * @param {FsmTransitionCreateManyArgs} args - Arguments to create many FsmTransitions.
   * @example
   * // Create many FsmTransitions
   * const fsmTransition = await prisma.fsmTransition.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FsmTransitionCreateManyArgs>(args?: Prisma.SelectSubset<T, FsmTransitionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a FsmTransition.
   * @param {FsmTransitionDeleteArgs} args - Arguments to delete one FsmTransition.
   * @example
   * // Delete one FsmTransition
   * const FsmTransition = await prisma.fsmTransition.delete({
   *   where: {
   *     // ... filter to delete one FsmTransition
   *   }
   * })
   * 
   */
  delete<T extends FsmTransitionDeleteArgs>(args: Prisma.SelectSubset<T, FsmTransitionDeleteArgs<ExtArgs>>): Prisma.Prisma__FsmTransitionClient<runtime.Types.Result.GetResult<Prisma.$FsmTransitionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FsmTransition.
   * @param {FsmTransitionUpdateArgs} args - Arguments to update one FsmTransition.
   * @example
   * // Update one FsmTransition
   * const fsmTransition = await prisma.fsmTransition.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FsmTransitionUpdateArgs>(args: Prisma.SelectSubset<T, FsmTransitionUpdateArgs<ExtArgs>>): Prisma.Prisma__FsmTransitionClient<runtime.Types.Result.GetResult<Prisma.$FsmTransitionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FsmTransitions.
   * @param {FsmTransitionDeleteManyArgs} args - Arguments to filter FsmTransitions to delete.
   * @example
   * // Delete a few FsmTransitions
   * const { count } = await prisma.fsmTransition.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FsmTransitionDeleteManyArgs>(args?: Prisma.SelectSubset<T, FsmTransitionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FsmTransitions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmTransitionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FsmTransitions
   * const fsmTransition = await prisma.fsmTransition.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FsmTransitionUpdateManyArgs>(args: Prisma.SelectSubset<T, FsmTransitionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one FsmTransition.
   * @param {FsmTransitionUpsertArgs} args - Arguments to update or create a FsmTransition.
   * @example
   * // Update or create a FsmTransition
   * const fsmTransition = await prisma.fsmTransition.upsert({
   *   create: {
   *     // ... data to create a FsmTransition
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FsmTransition we want to update
   *   }
   * })
   */
  upsert<T extends FsmTransitionUpsertArgs>(args: Prisma.SelectSubset<T, FsmTransitionUpsertArgs<ExtArgs>>): Prisma.Prisma__FsmTransitionClient<runtime.Types.Result.GetResult<Prisma.$FsmTransitionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FsmTransitions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmTransitionCountArgs} args - Arguments to filter FsmTransitions to count.
   * @example
   * // Count the number of FsmTransitions
   * const count = await prisma.fsmTransition.count({
   *   where: {
   *     // ... the filter for the FsmTransitions we want to count
   *   }
   * })
  **/
  count<T extends FsmTransitionCountArgs>(
    args?: Prisma.Subset<T, FsmTransitionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FsmTransitionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FsmTransition.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmTransitionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FsmTransitionAggregateArgs>(args: Prisma.Subset<T, FsmTransitionAggregateArgs>): Prisma.PrismaPromise<GetFsmTransitionAggregateType<T>>

  /**
   * Group by FsmTransition.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FsmTransitionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FsmTransitionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FsmTransitionGroupByArgs['orderBy'] }
      : { orderBy?: FsmTransitionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FsmTransitionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFsmTransitionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FsmTransition model
 */
readonly fields: FsmTransitionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FsmTransition.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FsmTransitionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  from_state<T extends Prisma.FsmStateDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FsmStateDefaultArgs<ExtArgs>>): Prisma.Prisma__FsmStateClient<runtime.Types.Result.GetResult<Prisma.$FsmStatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  to_state<T extends Prisma.FsmStateDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FsmStateDefaultArgs<ExtArgs>>): Prisma.Prisma__FsmStateClient<runtime.Types.Result.GetResult<Prisma.$FsmStatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  action<T extends Prisma.FsmActionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FsmActionDefaultArgs<ExtArgs>>): Prisma.Prisma__FsmActionClient<runtime.Types.Result.GetResult<Prisma.$FsmActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FsmTransition model
 */
export interface FsmTransitionFieldRefs {
  readonly id: Prisma.FieldRef<"FsmTransition", 'Int'>
  readonly from_state_id: Prisma.FieldRef<"FsmTransition", 'Int'>
  readonly action_id: Prisma.FieldRef<"FsmTransition", 'Int'>
  readonly to_state_id: Prisma.FieldRef<"FsmTransition", 'Int'>
}
    

// Custom InputTypes
/**
 * FsmTransition findUnique
 */
export type FsmTransitionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmTransition
   */
  select?: Prisma.FsmTransitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmTransition
   */
  omit?: Prisma.FsmTransitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmTransitionInclude<ExtArgs> | null
  /**
   * Filter, which FsmTransition to fetch.
   */
  where: Prisma.FsmTransitionWhereUniqueInput
}

/**
 * FsmTransition findUniqueOrThrow
 */
export type FsmTransitionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmTransition
   */
  select?: Prisma.FsmTransitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmTransition
   */
  omit?: Prisma.FsmTransitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmTransitionInclude<ExtArgs> | null
  /**
   * Filter, which FsmTransition to fetch.
   */
  where: Prisma.FsmTransitionWhereUniqueInput
}

/**
 * FsmTransition findFirst
 */
export type FsmTransitionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmTransition
   */
  select?: Prisma.FsmTransitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmTransition
   */
  omit?: Prisma.FsmTransitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmTransitionInclude<ExtArgs> | null
  /**
   * Filter, which FsmTransition to fetch.
   */
  where?: Prisma.FsmTransitionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmTransitions to fetch.
   */
  orderBy?: Prisma.FsmTransitionOrderByWithRelationInput | Prisma.FsmTransitionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FsmTransitions.
   */
  cursor?: Prisma.FsmTransitionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmTransitions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmTransitions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FsmTransitions.
   */
  distinct?: Prisma.FsmTransitionScalarFieldEnum | Prisma.FsmTransitionScalarFieldEnum[]
}

/**
 * FsmTransition findFirstOrThrow
 */
export type FsmTransitionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmTransition
   */
  select?: Prisma.FsmTransitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmTransition
   */
  omit?: Prisma.FsmTransitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmTransitionInclude<ExtArgs> | null
  /**
   * Filter, which FsmTransition to fetch.
   */
  where?: Prisma.FsmTransitionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmTransitions to fetch.
   */
  orderBy?: Prisma.FsmTransitionOrderByWithRelationInput | Prisma.FsmTransitionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FsmTransitions.
   */
  cursor?: Prisma.FsmTransitionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmTransitions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmTransitions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FsmTransitions.
   */
  distinct?: Prisma.FsmTransitionScalarFieldEnum | Prisma.FsmTransitionScalarFieldEnum[]
}

/**
 * FsmTransition findMany
 */
export type FsmTransitionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmTransition
   */
  select?: Prisma.FsmTransitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmTransition
   */
  omit?: Prisma.FsmTransitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmTransitionInclude<ExtArgs> | null
  /**
   * Filter, which FsmTransitions to fetch.
   */
  where?: Prisma.FsmTransitionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FsmTransitions to fetch.
   */
  orderBy?: Prisma.FsmTransitionOrderByWithRelationInput | Prisma.FsmTransitionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FsmTransitions.
   */
  cursor?: Prisma.FsmTransitionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FsmTransitions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FsmTransitions.
   */
  skip?: number
  distinct?: Prisma.FsmTransitionScalarFieldEnum | Prisma.FsmTransitionScalarFieldEnum[]
}

/**
 * FsmTransition create
 */
export type FsmTransitionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmTransition
   */
  select?: Prisma.FsmTransitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmTransition
   */
  omit?: Prisma.FsmTransitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmTransitionInclude<ExtArgs> | null
  /**
   * The data needed to create a FsmTransition.
   */
  data: Prisma.XOR<Prisma.FsmTransitionCreateInput, Prisma.FsmTransitionUncheckedCreateInput>
}

/**
 * FsmTransition createMany
 */
export type FsmTransitionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FsmTransitions.
   */
  data: Prisma.FsmTransitionCreateManyInput | Prisma.FsmTransitionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FsmTransition update
 */
export type FsmTransitionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmTransition
   */
  select?: Prisma.FsmTransitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmTransition
   */
  omit?: Prisma.FsmTransitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmTransitionInclude<ExtArgs> | null
  /**
   * The data needed to update a FsmTransition.
   */
  data: Prisma.XOR<Prisma.FsmTransitionUpdateInput, Prisma.FsmTransitionUncheckedUpdateInput>
  /**
   * Choose, which FsmTransition to update.
   */
  where: Prisma.FsmTransitionWhereUniqueInput
}

/**
 * FsmTransition updateMany
 */
export type FsmTransitionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FsmTransitions.
   */
  data: Prisma.XOR<Prisma.FsmTransitionUpdateManyMutationInput, Prisma.FsmTransitionUncheckedUpdateManyInput>
  /**
   * Filter which FsmTransitions to update
   */
  where?: Prisma.FsmTransitionWhereInput
  /**
   * Limit how many FsmTransitions to update.
   */
  limit?: number
}

/**
 * FsmTransition upsert
 */
export type FsmTransitionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmTransition
   */
  select?: Prisma.FsmTransitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmTransition
   */
  omit?: Prisma.FsmTransitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmTransitionInclude<ExtArgs> | null
  /**
   * The filter to search for the FsmTransition to update in case it exists.
   */
  where: Prisma.FsmTransitionWhereUniqueInput
  /**
   * In case the FsmTransition found by the `where` argument doesn't exist, create a new FsmTransition with this data.
   */
  create: Prisma.XOR<Prisma.FsmTransitionCreateInput, Prisma.FsmTransitionUncheckedCreateInput>
  /**
   * In case the FsmTransition was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FsmTransitionUpdateInput, Prisma.FsmTransitionUncheckedUpdateInput>
}

/**
 * FsmTransition delete
 */
export type FsmTransitionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmTransition
   */
  select?: Prisma.FsmTransitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmTransition
   */
  omit?: Prisma.FsmTransitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmTransitionInclude<ExtArgs> | null
  /**
   * Filter which FsmTransition to delete.
   */
  where: Prisma.FsmTransitionWhereUniqueInput
}

/**
 * FsmTransition deleteMany
 */
export type FsmTransitionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FsmTransitions to delete
   */
  where?: Prisma.FsmTransitionWhereInput
  /**
   * Limit how many FsmTransitions to delete.
   */
  limit?: number
}

/**
 * FsmTransition without action
 */
export type FsmTransitionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FsmTransition
   */
  select?: Prisma.FsmTransitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FsmTransition
   */
  omit?: Prisma.FsmTransitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FsmTransitionInclude<ExtArgs> | null
}
